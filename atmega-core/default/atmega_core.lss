
atmega_core.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000154a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000006a  00800060  0000154a  000015de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000f  008000ca  008000ca  00001648  2**0
                  ALLOC
  3 .stab         000010a4  00000000  00000000  00001648  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000470  00000000  00000000  000026ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000080  00000000  00000000  00002b5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000400  00000000  00000000  00002bdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000019fc  00000000  00000000  00002fdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000069b  00000000  00000000  000049d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001971  00000000  00000000  00005073  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000340  00000000  00000000  000069e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000007dc  00000000  00000000  00006d24  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000143c  00000000  00000000  00007500  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000112  00000000  00000000  0000893c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000090  00000000  00000000  00008a4e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e4       	ldi	r30, 0x4A	; 74
      68:	f5 e1       	ldi	r31, 0x15	; 21
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	aa 3c       	cpi	r26, 0xCA	; 202
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa ec       	ldi	r26, 0xCA	; 202
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 3d       	cpi	r26, 0xD9	; 217
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 f5 05 	call	0xbea	; 0xbea <main>
      8a:	0c 94 a3 0a 	jmp	0x1546	; 0x1546 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <I2C_StartCondition>:
// отправка команды СТАРТ
void I2C_StartCondition(void)
{
TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
      92:	84 ea       	ldi	r24, 0xA4	; 164
      94:	86 bf       	out	0x36, r24	; 54
while (!(TWCR & (1<<TWINT)));//ожидание установки бита TWIN
      96:	06 b6       	in	r0, 0x36	; 54
      98:	07 fe       	sbrs	r0, 7
      9a:	fd cf       	rjmp	.-6      	; 0x96 <I2C_StartCondition+0x4>
}
      9c:	08 95       	ret

0000009e <I2C_StopCondition>:

// отправка СТОП
void I2C_StopCondition(void)
{
TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
      9e:	84 e9       	ldi	r24, 0x94	; 148
      a0:	86 bf       	out	0x36, r24	; 54
}
      a2:	08 95       	ret

000000a4 <I2C_SendByte>:

//отправка байта
void I2C_SendByte(unsigned char c)
{
TWDR = c;//загрузка значения в регистр данных
      a4:	83 b9       	out	0x03, r24	; 3
TWCR = (1<<TWINT)|(1<<TWEN);//начаало передачи байта данных
      a6:	84 e8       	ldi	r24, 0x84	; 132
      a8:	86 bf       	out	0x36, r24	; 54
while (!(TWCR & (1<<TWINT)));//ожидание установки бита TWIN
      aa:	06 b6       	in	r0, 0x36	; 54
      ac:	07 fe       	sbrs	r0, 7
      ae:	fd cf       	rjmp	.-6      	; 0xaa <I2C_SendByte+0x6>
}
      b0:	08 95       	ret

000000b2 <I2C_SendPocket.clone.0>:
{
TWBR=0xFF;//скорость передачи
}

//отправка SLA_W + байт данных
void I2C_SendPocket (unsigned char value,unsigned char adres_rw)
      b2:	1f 93       	push	r17
      b4:	18 2f       	mov	r17, r24
{
I2C_StartCondition(); // генерируем условие СТАРТ
      b6:	0e 94 49 00 	call	0x92	; 0x92 <I2C_StartCondition>
I2C_SendByte(adres_rw); //оправляем адрес устройства+бит запись
      ba:	8e e4       	ldi	r24, 0x4E	; 78
      bc:	0e 94 52 00 	call	0xa4	; 0xa4 <I2C_SendByte>
I2C_SendByte(value);//отправляем байт данных
      c0:	81 2f       	mov	r24, r17
      c2:	0e 94 52 00 	call	0xa4	; 0xa4 <I2C_SendByte>
}

// отправка СТОП
void I2C_StopCondition(void)
{
TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
      c6:	84 e9       	ldi	r24, 0x94	; 148
      c8:	86 bf       	out	0x36, r24	; 54
{
I2C_StartCondition(); // генерируем условие СТАРТ
I2C_SendByte(adres_rw); //оправляем адрес устройства+бит запись
I2C_SendByte(value);//отправляем байт данных
I2C_StopCondition();//генерируем условие СТОП
}
      ca:	1f 91       	pop	r17
      cc:	08 95       	ret

000000ce <I2C_Init>:
}

//инициализация I2C как передатчика
void I2C_Init (void)
{
TWBR=0xFF;//скорость передачи
      ce:	8f ef       	ldi	r24, 0xFF	; 255
      d0:	80 b9       	out	0x00, r24	; 0
}
      d2:	08 95       	ret

000000d4 <I2C_SendPocket>:

//отправка SLA_W + байт данных
void I2C_SendPocket (unsigned char value,unsigned char adres_rw)
{
      d4:	1f 93       	push	r17
      d6:	df 93       	push	r29
      d8:	cf 93       	push	r28
      da:	0f 92       	push	r0
      dc:	cd b7       	in	r28, 0x3d	; 61
      de:	de b7       	in	r29, 0x3e	; 62
      e0:	18 2f       	mov	r17, r24
I2C_StartCondition(); // генерируем условие СТАРТ
      e2:	69 83       	std	Y+1, r22	; 0x01
      e4:	0e 94 49 00 	call	0x92	; 0x92 <I2C_StartCondition>
I2C_SendByte(adres_rw); //оправляем адрес устройства+бит запись
      e8:	89 81       	ldd	r24, Y+1	; 0x01
      ea:	0e 94 52 00 	call	0xa4	; 0xa4 <I2C_SendByte>
I2C_SendByte(value);//отправляем байт данных
      ee:	81 2f       	mov	r24, r17
      f0:	0e 94 52 00 	call	0xa4	; 0xa4 <I2C_SendByte>
}

// отправка СТОП
void I2C_StopCondition(void)
{
TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
      f4:	84 e9       	ldi	r24, 0x94	; 148
      f6:	86 bf       	out	0x36, r24	; 54
{
I2C_StartCondition(); // генерируем условие СТАРТ
I2C_SendByte(adres_rw); //оправляем адрес устройства+бит запись
I2C_SendByte(value);//отправляем байт данных
I2C_StopCondition();//генерируем условие СТОП
}
      f8:	0f 90       	pop	r0
      fa:	cf 91       	pop	r28
      fc:	df 91       	pop	r29
      fe:	1f 91       	pop	r17
     100:	08 95       	ret

00000102 <I2C_RecieveByte>:
//добавляем функции чтения по I2C
//чтение байта
unsigned char I2C_RecieveByte(void)
{
unsigned char dat;//переменная хранения значения
TWCR |= (1<<TWINT)|(1<<TWEN)|(1<<TWEA);
     102:	86 b7       	in	r24, 0x36	; 54
     104:	84 6c       	ori	r24, 0xC4	; 196
     106:	86 bf       	out	0x36, r24	; 54
while (!(TWCR & (1<<TWINT)));//ожидание установки бита TWIN
     108:	06 b6       	in	r0, 0x36	; 54
     10a:	07 fe       	sbrs	r0, 7
     10c:	fd cf       	rjmp	.-6      	; 0x108 <I2C_RecieveByte+0x6>
dat = TWDR;//читаем регистр данных
     10e:	83 b1       	in	r24, 0x03	; 3
return dat;
}
     110:	08 95       	ret

00000112 <I2C_RecieveLastByte>:

//чтение последнего байта
unsigned char I2C_RecieveLastByte(void)
{
unsigned char dat;//переменная хранения значения	
TWCR |= (1<<TWINT)|(1<<TWEN)|(0<<TWEA);//чтение последнего байта
     112:	86 b7       	in	r24, 0x36	; 54
     114:	84 68       	ori	r24, 0x84	; 132
     116:	86 bf       	out	0x36, r24	; 54
while (!(TWCR & (1<<TWINT)));//ожидание установки бита TWIN
     118:	06 b6       	in	r0, 0x36	; 54
     11a:	07 fe       	sbrs	r0, 7
     11c:	fd cf       	rjmp	.-6      	; 0x118 <I2C_RecieveLastByte+0x6>
dat = TWDR;//читаем регистр данных	
     11e:	83 b1       	in	r24, 0x03	; 3
return dat;
}	
     120:	08 95       	ret

00000122 <lcd_putnibble>:

#define lcd_putc(x)  lcd_putbyte(x, LCD_DATA)

/* функция передачи тетрады в жки */
void lcd_putnibble(char t)
{
     122:	1f 93       	push	r17
     124:	18 2f       	mov	r17, r24
    t<<=4;
    LCD_E_SET;
     126:	80 91 ca 00 	lds	r24, 0x00CA
     12a:	84 60       	ori	r24, 0x04	; 4
     12c:	80 93 ca 00 	sts	0x00CA, r24
     130:	0e 94 59 00 	call	0xb2	; 0xb2 <I2C_SendPocket.clone.0>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     134:	85 e8       	ldi	r24, 0x85	; 133
     136:	8a 95       	dec	r24
     138:	f1 f7       	brne	.-4      	; 0x136 <lcd_putnibble+0x14>
     13a:	00 00       	nop
#define lcd_putc(x)  lcd_putbyte(x, LCD_DATA)

/* функция передачи тетрады в жки */
void lcd_putnibble(char t)
{
    t<<=4;
     13c:	12 95       	swap	r17
     13e:	10 7f       	andi	r17, 0xF0	; 240
    LCD_E_SET;
    _delay_us(50);
    I2C_SendPocketLCD (Led_port|t);
     140:	80 91 ca 00 	lds	r24, 0x00CA
     144:	81 2b       	or	r24, r17
     146:	0e 94 59 00 	call	0xb2	; 0xb2 <I2C_SendPocket.clone.0>
    LCD_E_CLR;
     14a:	80 91 ca 00 	lds	r24, 0x00CA
     14e:	8b 7f       	andi	r24, 0xFB	; 251
     150:	80 93 ca 00 	sts	0x00CA, r24
     154:	0e 94 59 00 	call	0xb2	; 0xb2 <I2C_SendPocket.clone.0>
     158:	85 e8       	ldi	r24, 0x85	; 133
     15a:	8a 95       	dec	r24
     15c:	f1 f7       	brne	.-4      	; 0x15a <lcd_putnibble+0x38>
     15e:	00 00       	nop
    _delay_us(50);
}
     160:	1f 91       	pop	r17
     162:	08 95       	ret

00000164 <lcd_putbyte>:
char c - сам байт
char rs - переменная, указывающая что передается:
     rs = 0 - команда (устанавливается линия RS)
	 rs = 1 - данные (сбрасывается линия RS) */
void lcd_putbyte(char c, char rs)
{
     164:	0f 93       	push	r16
     166:	1f 93       	push	r17
     168:	18 2f       	mov	r17, r24
    char highc=0;
    highc=c>>4;
     16a:	08 2f       	mov	r16, r24
     16c:	02 95       	swap	r16
     16e:	0f 70       	andi	r16, 0x0F	; 15
     170:	80 91 ca 00 	lds	r24, 0x00CA
	if (rs==LCD_COMMAND) LCD_RS_CLR;
     174:	66 23       	and	r22, r22
     176:	11 f4       	brne	.+4      	; 0x17c <lcd_putbyte+0x18>
     178:	8e 7f       	andi	r24, 0xFE	; 254
     17a:	01 c0       	rjmp	.+2      	; 0x17e <lcd_putbyte+0x1a>
	else                 LCD_RS_SET;
     17c:	81 60       	ori	r24, 0x01	; 1
     17e:	80 93 ca 00 	sts	0x00CA, r24
     182:	0e 94 59 00 	call	0xb2	; 0xb2 <I2C_SendPocket.clone.0>
    lcd_putnibble(highc);
     186:	80 2f       	mov	r24, r16
     188:	0e 94 91 00 	call	0x122	; 0x122 <lcd_putnibble>
    lcd_putnibble(c);
     18c:	81 2f       	mov	r24, r17
     18e:	0e 94 91 00 	call	0x122	; 0x122 <lcd_putnibble>
}
     192:	1f 91       	pop	r17
     194:	0f 91       	pop	r16
     196:	08 95       	ret

00000198 <lcd_putchar>:

void lcd_putchar(char c)
{
     198:	1f 93       	push	r17
     19a:	18 2f       	mov	r17, r24
    char highc=0;
    highc=c>>4;
	LCD_RS_SET;
     19c:	80 91 ca 00 	lds	r24, 0x00CA
     1a0:	81 60       	ori	r24, 0x01	; 1
     1a2:	80 93 ca 00 	sts	0x00CA, r24
     1a6:	0e 94 59 00 	call	0xb2	; 0xb2 <I2C_SendPocket.clone.0>
    lcd_putnibble(highc);
     1aa:	81 2f       	mov	r24, r17
     1ac:	82 95       	swap	r24
     1ae:	8f 70       	andi	r24, 0x0F	; 15
     1b0:	0e 94 91 00 	call	0x122	; 0x122 <lcd_putnibble>
    lcd_putnibble(c);
     1b4:	81 2f       	mov	r24, r17
     1b6:	0e 94 91 00 	call	0x122	; 0x122 <lcd_putnibble>
}
     1ba:	1f 91       	pop	r17
     1bc:	08 95       	ret

000001be <lcd_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1be:	8f e2       	ldi	r24, 0x2F	; 47
     1c0:	95 e7       	ldi	r25, 0x75	; 117
     1c2:	01 97       	sbiw	r24, 0x01	; 1
     1c4:	f1 f7       	brne	.-4      	; 0x1c2 <lcd_init+0x4>
     1c6:	00 c0       	rjmp	.+0      	; 0x1c8 <lcd_init+0xa>
     1c8:	00 00       	nop
/* функция инициализации работы жки
в 4-битном режиме, без курсора */
void lcd_init()
{
    _delay_ms(15);
    lcd_putnibble(0b00000011);
     1ca:	83 e0       	ldi	r24, 0x03	; 3
     1cc:	0e 94 91 00 	call	0x122	; 0x122 <lcd_putnibble>
     1d0:	8f e3       	ldi	r24, 0x3F	; 63
     1d2:	9f e1       	ldi	r25, 0x1F	; 31
     1d4:	01 97       	sbiw	r24, 0x01	; 1
     1d6:	f1 f7       	brne	.-4      	; 0x1d4 <lcd_init+0x16>
     1d8:	00 c0       	rjmp	.+0      	; 0x1da <lcd_init+0x1c>
     1da:	00 00       	nop
    _delay_ms(4);
    lcd_putnibble(0b00000011);
     1dc:	83 e0       	ldi	r24, 0x03	; 3
     1de:	0e 94 91 00 	call	0x122	; 0x122 <lcd_putnibble>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1e2:	87 ec       	ldi	r24, 0xC7	; 199
     1e4:	90 e0       	ldi	r25, 0x00	; 0
     1e6:	01 97       	sbiw	r24, 0x01	; 1
     1e8:	f1 f7       	brne	.-4      	; 0x1e6 <lcd_init+0x28>
     1ea:	00 c0       	rjmp	.+0      	; 0x1ec <lcd_init+0x2e>
     1ec:	00 00       	nop
    _delay_us(100);
    lcd_putnibble(0b00000011);
     1ee:	83 e0       	ldi	r24, 0x03	; 3
     1f0:	0e 94 91 00 	call	0x122	; 0x122 <lcd_putnibble>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1f4:	8f ec       	ldi	r24, 0xCF	; 207
     1f6:	97 e0       	ldi	r25, 0x07	; 7
     1f8:	01 97       	sbiw	r24, 0x01	; 1
     1fa:	f1 f7       	brne	.-4      	; 0x1f8 <lcd_init+0x3a>
     1fc:	00 c0       	rjmp	.+0      	; 0x1fe <lcd_init+0x40>
     1fe:	00 00       	nop
	 _delay_ms(1);
    lcd_putnibble(0b00000010);
     200:	82 e0       	ldi	r24, 0x02	; 2
     202:	0e 94 91 00 	call	0x122	; 0x122 <lcd_putnibble>
     206:	8f ec       	ldi	r24, 0xCF	; 207
     208:	97 e0       	ldi	r25, 0x07	; 7
     20a:	01 97       	sbiw	r24, 0x01	; 1
     20c:	f1 f7       	brne	.-4      	; 0x20a <lcd_init+0x4c>
     20e:	00 c0       	rjmp	.+0      	; 0x210 <lcd_init+0x52>
     210:	00 00       	nop
	_delay_ms(1);
    lcd_putbyte(0x28, LCD_COMMAND); // стоит (0x28) 5x8 0b00101000 меняем (0x2C) 5x10 0b00101100 
     212:	88 e2       	ldi	r24, 0x28	; 40
     214:	60 e0       	ldi	r22, 0x00	; 0
     216:	0e 94 b2 00 	call	0x164	; 0x164 <lcd_putbyte>
     21a:	8f ec       	ldi	r24, 0xCF	; 207
     21c:	97 e0       	ldi	r25, 0x07	; 7
     21e:	01 97       	sbiw	r24, 0x01	; 1
     220:	f1 f7       	brne	.-4      	; 0x21e <lcd_init+0x60>
     222:	00 c0       	rjmp	.+0      	; 0x224 <lcd_init+0x66>
     224:	00 00       	nop
    _delay_ms(1);
    lcd_putbyte(0x0C, LCD_COMMAND);
     226:	8c e0       	ldi	r24, 0x0C	; 12
     228:	60 e0       	ldi	r22, 0x00	; 0
     22a:	0e 94 b2 00 	call	0x164	; 0x164 <lcd_putbyte>
     22e:	8f ec       	ldi	r24, 0xCF	; 207
     230:	97 e0       	ldi	r25, 0x07	; 7
     232:	01 97       	sbiw	r24, 0x01	; 1
     234:	f1 f7       	brne	.-4      	; 0x232 <lcd_init+0x74>
     236:	00 c0       	rjmp	.+0      	; 0x238 <lcd_init+0x7a>
     238:	00 00       	nop
    _delay_ms(1);
    lcd_putbyte(0x06, LCD_COMMAND);
     23a:	86 e0       	ldi	r24, 0x06	; 6
     23c:	60 e0       	ldi	r22, 0x00	; 0
     23e:	0e 94 b2 00 	call	0x164	; 0x164 <lcd_putbyte>
     242:	8f ec       	ldi	r24, 0xCF	; 207
     244:	97 e0       	ldi	r25, 0x07	; 7
     246:	01 97       	sbiw	r24, 0x01	; 1
     248:	f1 f7       	brne	.-4      	; 0x246 <lcd_init+0x88>
     24a:	00 c0       	rjmp	.+0      	; 0x24c <lcd_init+0x8e>
     24c:	00 00       	nop
    _delay_ms(1);
	LCD_BT_SET;//включаем подсветку
     24e:	80 91 ca 00 	lds	r24, 0x00CA
     252:	88 60       	ori	r24, 0x08	; 8
     254:	80 93 ca 00 	sts	0x00CA, r24
     258:	0e 94 59 00 	call	0xb2	; 0xb2 <I2C_SendPocket.clone.0>
	LCD_RW_CLR;//запись r/w
     25c:	80 91 ca 00 	lds	r24, 0x00CA
     260:	8d 7f       	andi	r24, 0xFD	; 253
     262:	80 93 ca 00 	sts	0x00CA, r24
     266:	0e 94 59 00 	call	0xb2	; 0xb2 <I2C_SendPocket.clone.0>
}
     26a:	08 95       	ret

0000026c <lcd_clear>:

/* функция очистки дисплея и возврата
курсора в начальную позицию*/
void lcd_clear()
{
    lcd_putbyte(0x01, LCD_COMMAND);
     26c:	81 e0       	ldi	r24, 0x01	; 1
     26e:	60 e0       	ldi	r22, 0x00	; 0
     270:	0e 94 b2 00 	call	0x164	; 0x164 <lcd_putbyte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     274:	87 eb       	ldi	r24, 0xB7	; 183
     276:	9b e0       	ldi	r25, 0x0B	; 11
     278:	01 97       	sbiw	r24, 0x01	; 1
     27a:	f1 f7       	brne	.-4      	; 0x278 <lcd_clear+0xc>
     27c:	00 c0       	rjmp	.+0      	; 0x27e <lcd_clear+0x12>
     27e:	00 00       	nop
    _delay_us(1500);
}
     280:	08 95       	ret

00000282 <lcd_gotoxy>:
col - номер знакоместа по горизонтальной оси (от 0 до 15)
row - номер строки (0 или 1) */
void lcd_gotoxy(char col, char row)
{
  char adr;
  adr=0x40*row+col;
     282:	62 95       	swap	r22
     284:	66 0f       	add	r22, r22
     286:	66 0f       	add	r22, r22
     288:	60 7c       	andi	r22, 0xC0	; 192
     28a:	68 0f       	add	r22, r24
  adr|=0x80;
  lcd_putbyte(adr, LCD_COMMAND);
     28c:	86 2f       	mov	r24, r22
     28e:	80 68       	ori	r24, 0x80	; 128
     290:	60 e0       	ldi	r22, 0x00	; 0
     292:	0e 94 b2 00 	call	0x164	; 0x164 <lcd_putbyte>
}
     296:	08 95       	ret

00000298 <lcd_putstring>:

void lcd_putstring (char stroka[])
{  char i;
     298:	1f 93       	push	r17
     29a:	cf 93       	push	r28
     29c:	df 93       	push	r29
     29e:	ec 01       	movw	r28, r24
   for(i=0;stroka[i]!='\0';i++)
     2a0:	10 e0       	ldi	r17, 0x00	; 0
     2a2:	03 c0       	rjmp	.+6      	; 0x2aa <lcd_putstring+0x12>
   lcd_putchar(stroka[i]);
     2a4:	0e 94 cc 00 	call	0x198	; 0x198 <lcd_putchar>
  lcd_putbyte(adr, LCD_COMMAND);
}

void lcd_putstring (char stroka[])
{  char i;
   for(i=0;stroka[i]!='\0';i++)
     2a8:	1f 5f       	subi	r17, 0xFF	; 255
     2aa:	fe 01       	movw	r30, r28
     2ac:	e1 0f       	add	r30, r17
     2ae:	f1 1d       	adc	r31, r1
     2b0:	80 81       	ld	r24, Z
     2b2:	88 23       	and	r24, r24
     2b4:	b9 f7       	brne	.-18     	; 0x2a4 <lcd_putstring+0xc>
   lcd_putchar(stroka[i]);
}	
     2b6:	df 91       	pop	r29
     2b8:	cf 91       	pop	r28
     2ba:	1f 91       	pop	r17
     2bc:	08 95       	ret

000002be <spi_init>:
#define CLOCKDIV4 (0<<SPR0)
#define CLOCKDIV16 (1<<SPR0)
#define CLOCKDIV64 (2<<SPR0)

void spi_init(uint8_t setup){
 SPI_DDR |= (1<<SPI_MOSI_BIT)|(1<<SPI_SCK_BIT)|(1<<SPI_CS_BIT);
     2be:	97 b3       	in	r25, 0x17	; 23
     2c0:	90 6b       	ori	r25, 0xB0	; 176
     2c2:	97 bb       	out	0x17, r25	; 23

 SPCR = (1<<SPE)|(1<<MSTR)|setup;
     2c4:	80 65       	ori	r24, 0x50	; 80
     2c6:	8d b9       	out	0x0d, r24	; 13
}
     2c8:	08 95       	ret

000002ca <spi_send_byte>:

void spi_send_byte(uint8_t data){
 SPDR = data;
     2ca:	8f b9       	out	0x0f, r24	; 15
 while(!(SPSR & (1<<SPIF)));
     2cc:	77 9b       	sbis	0x0e, 7	; 14
     2ce:	fe cf       	rjmp	.-4      	; 0x2cc <spi_send_byte+0x2>
}
     2d0:	08 95       	ret

000002d2 <spi_read_byte>:

uint8_t spi_read_byte(void){
 SPDR = 0x00;
     2d2:	1f b8       	out	0x0f, r1	; 15
 while(!(SPSR & (1<<SPIF)));
     2d4:	77 9b       	sbis	0x0e, 7	; 14
     2d6:	fe cf       	rjmp	.-4      	; 0x2d4 <spi_read_byte+0x2>
 return SPDR;
     2d8:	8f b1       	in	r24, 0x0f	; 15
}
     2da:	08 95       	ret

000002dc <Write_MFRC522>:
* Function:ResetMFRC522
* Description: reset RC522
* Input parameter:null
* Return:null
*/
void Write_MFRC522(uchar addr, uchar val){
     2dc:	df 93       	push	r29
     2de:	cf 93       	push	r28
     2e0:	0f 92       	push	r0
     2e2:	cd b7       	in	r28, 0x3d	; 61
     2e4:	de b7       	in	r29, 0x3e	; 62
	pinSlaveSelect_LOW;
     2e6:	c4 98       	cbi	0x18, 4	; 24
	//address format:0XXXXXX0
	spi_send_byte((addr << 1) & 0x7E);
     2e8:	88 0f       	add	r24, r24
     2ea:	8e 77       	andi	r24, 0x7E	; 126
     2ec:	69 83       	std	Y+1, r22	; 0x01
     2ee:	0e 94 65 01 	call	0x2ca	; 0x2ca <spi_send_byte>
	spi_send_byte(val);
     2f2:	69 81       	ldd	r22, Y+1	; 0x01
     2f4:	86 2f       	mov	r24, r22
     2f6:	0e 94 65 01 	call	0x2ca	; 0x2ca <spi_send_byte>
	pinSlaveSelect_HIGH;
     2fa:	c4 9a       	sbi	0x18, 4	; 24
}
     2fc:	0f 90       	pop	r0
     2fe:	cf 91       	pop	r28
     300:	df 91       	pop	r29
     302:	08 95       	ret

00000304 <Read_MFRC522>:
* Input parameter:addr--register address
* Return:return the read value
*/
uchar Read_MFRC522(uchar addr){
	uchar val;
	pinSlaveSelect_LOW;
     304:	c4 98       	cbi	0x18, 4	; 24
	//address format:1XXXXXX0
	spi_send_byte(((addr << 1) & 0x7E) | 0x80);
     306:	88 0f       	add	r24, r24
     308:	8e 77       	andi	r24, 0x7E	; 126
     30a:	80 68       	ori	r24, 0x80	; 128
     30c:	0e 94 65 01 	call	0x2ca	; 0x2ca <spi_send_byte>
	//spi_send_byte(0x00);
	val = spi_read_byte();	//val = SPI.transfer(0x00);
     310:	0e 94 69 01 	call	0x2d2	; 0x2d2 <spi_read_byte>
	pinSlaveSelect_HIGH;
     314:	c4 9a       	sbi	0x18, 4	; 24
	return val;
}
     316:	08 95       	ret

00000318 <MFRC522_Reset>:

void MFRC522_Reset(void){
	Write_MFRC522(CommandReg, PCD_RESETPHASE);
     318:	81 e0       	ldi	r24, 0x01	; 1
     31a:	6f e0       	ldi	r22, 0x0F	; 15
     31c:	0e 94 6e 01 	call	0x2dc	; 0x2dc <Write_MFRC522>
}
     320:	08 95       	ret

00000322 <MFRC522_SetBitMask>:
* Function:SetBitMask
* Description:set RC522 register bit
* Input parameter:reg--register address;mask--value
* Return:null
*/
void MFRC522_SetBitMask(uchar reg, uchar mask){
     322:	1f 93       	push	r17
     324:	df 93       	push	r29
     326:	cf 93       	push	r28
     328:	0f 92       	push	r0
     32a:	cd b7       	in	r28, 0x3d	; 61
     32c:	de b7       	in	r29, 0x3e	; 62
     32e:	18 2f       	mov	r17, r24
	uchar tmp;
	tmp = Read_MFRC522(reg);
     330:	69 83       	std	Y+1, r22	; 0x01
     332:	0e 94 82 01 	call	0x304	; 0x304 <Read_MFRC522>
	Write_MFRC522(reg, tmp | mask); // set bit mask
     336:	69 81       	ldd	r22, Y+1	; 0x01
     338:	68 2b       	or	r22, r24
     33a:	81 2f       	mov	r24, r17
     33c:	0e 94 6e 01 	call	0x2dc	; 0x2dc <Write_MFRC522>
}
     340:	0f 90       	pop	r0
     342:	cf 91       	pop	r28
     344:	df 91       	pop	r29
     346:	1f 91       	pop	r17
     348:	08 95       	ret

0000034a <MFRC522_ClearBitMask>:
* Function:ClearBitMask
* Description:clear RC522 register bit
* Input parameter:reg--register address;mask--value
* Return:null
*/
void MFRC522_ClearBitMask(uchar reg, uchar mask){
     34a:	1f 93       	push	r17
     34c:	df 93       	push	r29
     34e:	cf 93       	push	r28
     350:	0f 92       	push	r0
     352:	cd b7       	in	r28, 0x3d	; 61
     354:	de b7       	in	r29, 0x3e	; 62
     356:	18 2f       	mov	r17, r24
	uchar tmp;
	tmp = Read_MFRC522(reg);
     358:	69 83       	std	Y+1, r22	; 0x01
     35a:	0e 94 82 01 	call	0x304	; 0x304 <Read_MFRC522>
	Write_MFRC522(reg, tmp & (~mask)); // clear bit mask
     35e:	69 81       	ldd	r22, Y+1	; 0x01
     360:	60 95       	com	r22
     362:	68 23       	and	r22, r24
     364:	81 2f       	mov	r24, r17
     366:	0e 94 6e 01 	call	0x2dc	; 0x2dc <Write_MFRC522>
}
     36a:	0f 90       	pop	r0
     36c:	cf 91       	pop	r28
     36e:	df 91       	pop	r29
     370:	1f 91       	pop	r17
     372:	08 95       	ret

00000374 <MFRC522_CalulateCRC>:
* Function:CalulateCRC
* Description:Use MF522 to caculate CRC
* Input parameter:pIndata--the CRC data need to be read,len--data length,pOutData-- the caculated result of CRC
* return:Null
*/
void MFRC522_CalulateCRC(uchar *pIndata, uchar len, uchar *pOutData){
     374:	cf 92       	push	r12
     376:	df 92       	push	r13
     378:	ef 92       	push	r14
     37a:	ff 92       	push	r15
     37c:	0f 93       	push	r16
     37e:	1f 93       	push	r17
     380:	df 93       	push	r29
     382:	cf 93       	push	r28
     384:	0f 92       	push	r0
     386:	cd b7       	in	r28, 0x3d	; 61
     388:	de b7       	in	r29, 0x3e	; 62
     38a:	f8 2e       	mov	r15, r24
     38c:	e6 2e       	mov	r14, r22
     38e:	8a 01       	movw	r16, r20
	uchar i, n;
	MFRC522_ClearBitMask(DivIrqReg, 0x04);	//CRCIrq = 0
     390:	85 e0       	ldi	r24, 0x05	; 5
     392:	64 e0       	ldi	r22, 0x04	; 4
     394:	99 83       	std	Y+1, r25	; 0x01
     396:	0e 94 a5 01 	call	0x34a	; 0x34a <MFRC522_ClearBitMask>
	MFRC522_SetBitMask(FIFOLevelReg, 0x80);	//Clear FIFO pointer
     39a:	8a e0       	ldi	r24, 0x0A	; 10
     39c:	60 e8       	ldi	r22, 0x80	; 128
     39e:	0e 94 91 01 	call	0x322	; 0x322 <MFRC522_SetBitMask>
	//Write_MFRC522(CommandReg, PCD_IDLE);
	//Write data into FIFO
	for (i = 0; i < len; i++){
     3a2:	99 81       	ldd	r25, Y+1	; 0x01
     3a4:	6f 2d       	mov	r22, r15
     3a6:	79 2f       	mov	r23, r25
     3a8:	6b 01       	movw	r12, r22
     3aa:	06 c0       	rjmp	.+12     	; 0x3b8 <MFRC522_CalulateCRC+0x44>
		Write_MFRC522(FIFODataReg, *(pIndata + i));
     3ac:	f6 01       	movw	r30, r12
     3ae:	61 91       	ld	r22, Z+
     3b0:	6f 01       	movw	r12, r30
     3b2:	89 e0       	ldi	r24, 0x09	; 9
     3b4:	0e 94 6e 01 	call	0x2dc	; 0x2dc <Write_MFRC522>
	uchar i, n;
	MFRC522_ClearBitMask(DivIrqReg, 0x04);	//CRCIrq = 0
	MFRC522_SetBitMask(FIFOLevelReg, 0x80);	//Clear FIFO pointer
	//Write_MFRC522(CommandReg, PCD_IDLE);
	//Write data into FIFO
	for (i = 0; i < len; i++){
     3b8:	8c 2d       	mov	r24, r12
     3ba:	8f 19       	sub	r24, r15
     3bc:	8e 15       	cp	r24, r14
     3be:	b0 f3       	brcs	.-20     	; 0x3ac <MFRC522_CalulateCRC+0x38>
		Write_MFRC522(FIFODataReg, *(pIndata + i));
	}
	Write_MFRC522(CommandReg, PCD_CALCCRC);
     3c0:	81 e0       	ldi	r24, 0x01	; 1
     3c2:	63 e0       	ldi	r22, 0x03	; 3
     3c4:	0e 94 6e 01 	call	0x2dc	; 0x2dc <Write_MFRC522>

	//waite CRC caculation to finish
	i = 0xFF;
     3c8:	ff 24       	eor	r15, r15
     3ca:	fa 94       	dec	r15
	do{
		n = Read_MFRC522(DivIrqReg);
     3cc:	85 e0       	ldi	r24, 0x05	; 5
     3ce:	0e 94 82 01 	call	0x304	; 0x304 <Read_MFRC522>
		i--;
     3d2:	fa 94       	dec	r15
	}

	while ((i != 0) && !(n & 0x04));	//CRCIrq = 1
     3d4:	11 f0       	breq	.+4      	; 0x3da <MFRC522_CalulateCRC+0x66>
     3d6:	82 ff       	sbrs	r24, 2
     3d8:	f9 cf       	rjmp	.-14     	; 0x3cc <MFRC522_CalulateCRC+0x58>

	//read CRC caculation result
	pOutData[0] = Read_MFRC522(CRCResultRegL);
     3da:	82 e2       	ldi	r24, 0x22	; 34
     3dc:	0e 94 82 01 	call	0x304	; 0x304 <Read_MFRC522>
     3e0:	f8 01       	movw	r30, r16
     3e2:	80 83       	st	Z, r24
	pOutData[1] = Read_MFRC522(CRCResultRegM);
     3e4:	81 e2       	ldi	r24, 0x21	; 33
     3e6:	0e 94 82 01 	call	0x304	; 0x304 <Read_MFRC522>
     3ea:	f8 01       	movw	r30, r16
     3ec:	81 83       	std	Z+1, r24	; 0x01
}
     3ee:	0f 90       	pop	r0
     3f0:	cf 91       	pop	r28
     3f2:	df 91       	pop	r29
     3f4:	1f 91       	pop	r17
     3f6:	0f 91       	pop	r16
     3f8:	ff 90       	pop	r15
     3fa:	ef 90       	pop	r14
     3fc:	df 90       	pop	r13
     3fe:	cf 90       	pop	r12
     400:	08 95       	ret

00000402 <MFRC522_ToCard>:
* sendLen--send data length
* backData--the return data from card
* backLen--the length of return data
* return:return MI_OK if successed
*/
uchar MFRC522_ToCard(uchar command, uchar *sendData, uchar sendLen,uchar *backData, uint *backLen){
     402:	4f 92       	push	r4
     404:	5f 92       	push	r5
     406:	7f 92       	push	r7
     408:	8f 92       	push	r8
     40a:	9f 92       	push	r9
     40c:	af 92       	push	r10
     40e:	bf 92       	push	r11
     410:	cf 92       	push	r12
     412:	df 92       	push	r13
     414:	ef 92       	push	r14
     416:	ff 92       	push	r15
     418:	0f 93       	push	r16
     41a:	1f 93       	push	r17
     41c:	df 93       	push	r29
     41e:	cf 93       	push	r28
     420:	00 d0       	rcall	.+0      	; 0x422 <MFRC522_ToCard+0x20>
     422:	cd b7       	in	r28, 0x3d	; 61
     424:	de b7       	in	r29, 0x3e	; 62
     426:	f8 2e       	mov	r15, r24
     428:	a6 2e       	mov	r10, r22
     42a:	72 2e       	mov	r7, r18
     42c:	83 2e       	mov	r8, r19
     42e:	68 01       	movw	r12, r16
				for (i = 0; i < n; i++){
					backData[i] = Read_MFRC522(FIFODataReg);
				}
			}
		}else{
			status = MI_ERR;
     430:	8c 50       	subi	r24, 0x0C	; 12
     432:	83 30       	cpi	r24, 0x03	; 3
     434:	50 f4       	brcc	.+20     	; 0x44a <MFRC522_ToCard+0x48>
     436:	90 e0       	ldi	r25, 0x00	; 0
     438:	fc 01       	movw	r30, r24
     43a:	ed 53       	subi	r30, 0x3D	; 61
     43c:	ff 4f       	sbci	r31, 0xFF	; 255
     43e:	e0 80       	ld	r14, Z
     440:	8a 53       	subi	r24, 0x3A	; 58
     442:	9f 4f       	sbci	r25, 0xFF	; 255
     444:	fc 01       	movw	r30, r24
     446:	90 80       	ld	r9, Z
     448:	02 c0       	rjmp	.+4      	; 0x44e <MFRC522_ToCard+0x4c>
* sendLen--send data length
* backData--the return data from card
* backLen--the length of return data
* return:return MI_OK if successed
*/
uchar MFRC522_ToCard(uchar command, uchar *sendData, uchar sendLen,uchar *backData, uint *backLen){
     44a:	99 24       	eor	r9, r9
     44c:	ee 24       	eor	r14, r14
		}
		default:
		break;
	}

	Write_MFRC522(CommIEnReg, irqEn | 0x80);	//Allow interruption
     44e:	6e 2d       	mov	r22, r14
     450:	60 68       	ori	r22, 0x80	; 128
     452:	82 e0       	ldi	r24, 0x02	; 2
     454:	49 83       	std	Y+1, r20	; 0x01
     456:	7a 83       	std	Y+2, r23	; 0x02
     458:	0e 94 6e 01 	call	0x2dc	; 0x2dc <Write_MFRC522>
	MFRC522_ClearBitMask(CommIrqReg, 0x80);	//Clear all the interrupt bits
     45c:	84 e0       	ldi	r24, 0x04	; 4
     45e:	60 e8       	ldi	r22, 0x80	; 128
     460:	0e 94 a5 01 	call	0x34a	; 0x34a <MFRC522_ClearBitMask>
	MFRC522_SetBitMask(FIFOLevelReg, 0x80);	//FlushBuffer=1, FIFO initilizate
     464:	8a e0       	ldi	r24, 0x0A	; 10
     466:	60 e8       	ldi	r22, 0x80	; 128
     468:	0e 94 91 01 	call	0x322	; 0x322 <MFRC522_SetBitMask>
	Write_MFRC522(CommandReg, PCD_IDLE);//NO action;cancel current command ???
     46c:	81 e0       	ldi	r24, 0x01	; 1
     46e:	60 e0       	ldi	r22, 0x00	; 0
     470:	0e 94 6e 01 	call	0x2dc	; 0x2dc <Write_MFRC522>
     474:	7a 81       	ldd	r23, Y+2	; 0x02
     476:	0a 2d       	mov	r16, r10
     478:	17 2f       	mov	r17, r23

	//write data into FIFO
	for (i = 0; i < sendLen; i++){
     47a:	44 24       	eor	r4, r4
     47c:	55 24       	eor	r5, r5
     47e:	49 81       	ldd	r20, Y+1	; 0x01
     480:	a4 2e       	mov	r10, r20
     482:	bb 24       	eor	r11, r11
     484:	09 c0       	rjmp	.+18     	; 0x498 <MFRC522_ToCard+0x96>
		Write_MFRC522(FIFODataReg, sendData[i]);
     486:	f8 01       	movw	r30, r16
     488:	61 91       	ld	r22, Z+
     48a:	8f 01       	movw	r16, r30
     48c:	89 e0       	ldi	r24, 0x09	; 9
     48e:	0e 94 6e 01 	call	0x2dc	; 0x2dc <Write_MFRC522>
	MFRC522_ClearBitMask(CommIrqReg, 0x80);	//Clear all the interrupt bits
	MFRC522_SetBitMask(FIFOLevelReg, 0x80);	//FlushBuffer=1, FIFO initilizate
	Write_MFRC522(CommandReg, PCD_IDLE);//NO action;cancel current command ???

	//write data into FIFO
	for (i = 0; i < sendLen; i++){
     492:	08 94       	sec
     494:	41 1c       	adc	r4, r1
     496:	51 1c       	adc	r5, r1
     498:	4a 14       	cp	r4, r10
     49a:	5b 04       	cpc	r5, r11
     49c:	a0 f3       	brcs	.-24     	; 0x486 <MFRC522_ToCard+0x84>
		Write_MFRC522(FIFODataReg, sendData[i]);
	}

	//procceed it
	Write_MFRC522(CommandReg, command);
     49e:	81 e0       	ldi	r24, 0x01	; 1
     4a0:	6f 2d       	mov	r22, r15
     4a2:	0e 94 6e 01 	call	0x2dc	; 0x2dc <Write_MFRC522>
	if (command == PCD_TRANSCEIVE){
     4a6:	ff 2d       	mov	r31, r15
     4a8:	fc 30       	cpi	r31, 0x0C	; 12
     4aa:	21 f4       	brne	.+8      	; 0x4b4 <MFRC522_ToCard+0xb2>
		MFRC522_SetBitMask(BitFramingReg, 0x80);//StartSend=1,transmission of data starts
     4ac:	8d e0       	ldi	r24, 0x0D	; 13
     4ae:	60 e8       	ldi	r22, 0x80	; 128
     4b0:	0e 94 91 01 	call	0x322	; 0x322 <MFRC522_SetBitMask>
	MFRC522_ClearBitMask(CommIrqReg, 0x80);	//Clear all the interrupt bits
	MFRC522_SetBitMask(FIFOLevelReg, 0x80);	//FlushBuffer=1, FIFO initilizate
	Write_MFRC522(CommandReg, PCD_IDLE);//NO action;cancel current command ???

	//write data into FIFO
	for (i = 0; i < sendLen; i++){
     4b4:	60 ed       	ldi	r22, 0xD0	; 208
     4b6:	a6 2e       	mov	r10, r22
     4b8:	67 e0       	ldi	r22, 0x07	; 7
     4ba:	b6 2e       	mov	r11, r22
	//waite receive data is finished
	i = 2000;//i should adjust according the clock, the maxium the waiting time should be 25 ms???
	do{
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = Read_MFRC522(CommIrqReg);
     4bc:	84 e0       	ldi	r24, 0x04	; 4
     4be:	0e 94 82 01 	call	0x304	; 0x304 <Read_MFRC522>
     4c2:	08 2f       	mov	r16, r24
		i--;
     4c4:	08 94       	sec
     4c6:	a1 08       	sbc	r10, r1
     4c8:	b1 08       	sbc	r11, r1
	}
	while ((i != 0) && !(n & 0x01) && !(n & waitIRq));
     4ca:	a1 14       	cp	r10, r1
     4cc:	b1 04       	cpc	r11, r1
     4ce:	21 f0       	breq	.+8      	; 0x4d8 <MFRC522_ToCard+0xd6>
     4d0:	80 fd       	sbrc	r24, 0
     4d2:	02 c0       	rjmp	.+4      	; 0x4d8 <MFRC522_ToCard+0xd6>
     4d4:	89 21       	and	r24, r9
     4d6:	91 f3       	breq	.-28     	; 0x4bc <MFRC522_ToCard+0xba>

	MFRC522_ClearBitMask(BitFramingReg, 0x80);	//StartSend=0
     4d8:	8d e0       	ldi	r24, 0x0D	; 13
     4da:	60 e8       	ldi	r22, 0x80	; 128
     4dc:	0e 94 a5 01 	call	0x34a	; 0x34a <MFRC522_ClearBitMask>
	if (i != 0) {
     4e0:	a1 14       	cp	r10, r1
     4e2:	b1 04       	cpc	r11, r1
     4e4:	09 f4       	brne	.+2      	; 0x4e8 <MFRC522_ToCard+0xe6>
     4e6:	48 c0       	rjmp	.+144    	; 0x578 <MFRC522_ToCard+0x176>
		if (!(Read_MFRC522(ErrorReg) & 0x1B)){ //BufferOvfl Collerr CRCErr ProtecolErr
     4e8:	86 e0       	ldi	r24, 0x06	; 6
     4ea:	0e 94 82 01 	call	0x304	; 0x304 <Read_MFRC522>
     4ee:	8b 71       	andi	r24, 0x1B	; 27
     4f0:	09 f0       	breq	.+2      	; 0x4f4 <MFRC522_ToCard+0xf2>
     4f2:	42 c0       	rjmp	.+132    	; 0x578 <MFRC522_ToCard+0x176>
			status = MI_OK;
			if (n & irqEn & 0x01){
     4f4:	e0 22       	and	r14, r16
	while ((i != 0) && !(n & 0x01) && !(n & waitIRq));

	MFRC522_ClearBitMask(BitFramingReg, 0x80);	//StartSend=0
	if (i != 0) {
		if (!(Read_MFRC522(ErrorReg) & 0x1B)){ //BufferOvfl Collerr CRCErr ProtecolErr
			status = MI_OK;
     4f6:	81 e0       	ldi	r24, 0x01	; 1
     4f8:	e8 22       	and	r14, r24
			if (n & irqEn & 0x01){
				status = MI_NOTAGERR;	//??
			}

			if (command == PCD_TRANSCEIVE){
     4fa:	ef 2d       	mov	r30, r15
     4fc:	ec 30       	cpi	r30, 0x0C	; 12
     4fe:	f1 f5       	brne	.+124    	; 0x57c <MFRC522_ToCard+0x17a>
				n = Read_MFRC522(FIFOLevelReg);
     500:	8a e0       	ldi	r24, 0x0A	; 10
     502:	0e 94 82 01 	call	0x304	; 0x304 <Read_MFRC522>
     506:	98 2f       	mov	r25, r24
				lastBits = Read_MFRC522(ControlReg) & 0x07;
     508:	8c e0       	ldi	r24, 0x0C	; 12
     50a:	99 83       	std	Y+1, r25	; 0x01
     50c:	0e 94 82 01 	call	0x304	; 0x304 <Read_MFRC522>
     510:	87 70       	andi	r24, 0x07	; 7
     512:	99 81       	ldd	r25, Y+1	; 0x01
     514:	29 2f       	mov	r18, r25
     516:	30 e0       	ldi	r19, 0x00	; 0
				if (lastBits){
     518:	88 23       	and	r24, r24
     51a:	51 f0       	breq	.+20     	; 0x530 <MFRC522_ToCard+0x12e>
					*backLen = (n - 1) * 8 + lastBits;
     51c:	21 50       	subi	r18, 0x01	; 1
     51e:	30 40       	sbci	r19, 0x00	; 0
     520:	53 e0       	ldi	r21, 0x03	; 3
     522:	22 0f       	add	r18, r18
     524:	33 1f       	adc	r19, r19
     526:	5a 95       	dec	r21
     528:	e1 f7       	brne	.-8      	; 0x522 <MFRC522_ToCard+0x120>
     52a:	28 0f       	add	r18, r24
     52c:	31 1d       	adc	r19, r1
     52e:	05 c0       	rjmp	.+10     	; 0x53a <MFRC522_ToCard+0x138>
				}else{
					*backLen = n * 8;
     530:	43 e0       	ldi	r20, 0x03	; 3
     532:	22 0f       	add	r18, r18
     534:	33 1f       	adc	r19, r19
     536:	4a 95       	dec	r20
     538:	e1 f7       	brne	.-8      	; 0x532 <MFRC522_ToCard+0x130>
     53a:	f6 01       	movw	r30, r12
     53c:	31 83       	std	Z+1, r19	; 0x01
     53e:	20 83       	st	Z, r18
				}

				if (n == 0){
     540:	99 23       	and	r25, r25
     542:	19 f0       	breq	.+6      	; 0x54a <MFRC522_ToCard+0x148>
					n = 1;
				}

				if (n > MAX_LEN){
     544:	91 31       	cpi	r25, 0x11	; 17
     546:	18 f4       	brcc	.+6      	; 0x54e <MFRC522_ToCard+0x14c>
     548:	03 c0       	rjmp	.+6      	; 0x550 <MFRC522_ToCard+0x14e>
				}else{
					*backLen = n * 8;
				}

				if (n == 0){
					n = 1;
     54a:	91 e0       	ldi	r25, 0x01	; 1
     54c:	01 c0       	rjmp	.+2      	; 0x550 <MFRC522_ToCard+0x14e>
				}

				if (n > MAX_LEN){
					n = MAX_LEN;
     54e:	90 e1       	ldi	r25, 0x10	; 16

				if (n == 0){
					n = 1;
				}

				if (n > MAX_LEN){
     550:	07 2d       	mov	r16, r7
     552:	18 2d       	mov	r17, r8
					n = MAX_LEN;
				}

				//read the data from FIFO
				for (i = 0; i < n; i++){
     554:	aa 24       	eor	r10, r10
     556:	bb 24       	eor	r11, r11
     558:	c9 2e       	mov	r12, r25
     55a:	dd 24       	eor	r13, r13
     55c:	09 c0       	rjmp	.+18     	; 0x570 <MFRC522_ToCard+0x16e>
					backData[i] = Read_MFRC522(FIFODataReg);
     55e:	89 e0       	ldi	r24, 0x09	; 9
     560:	0e 94 82 01 	call	0x304	; 0x304 <Read_MFRC522>
     564:	f8 01       	movw	r30, r16
     566:	81 93       	st	Z+, r24
     568:	8f 01       	movw	r16, r30
				if (n > MAX_LEN){
					n = MAX_LEN;
				}

				//read the data from FIFO
				for (i = 0; i < n; i++){
     56a:	08 94       	sec
     56c:	a1 1c       	adc	r10, r1
     56e:	b1 1c       	adc	r11, r1
     570:	ac 14       	cp	r10, r12
     572:	bd 04       	cpc	r11, r13
     574:	a0 f3       	brcs	.-24     	; 0x55e <MFRC522_ToCard+0x15c>
     576:	02 c0       	rjmp	.+4      	; 0x57c <MFRC522_ToCard+0x17a>
					backData[i] = Read_MFRC522(FIFODataReg);
				}
			}
		}else{
			status = MI_ERR;
     578:	82 e0       	ldi	r24, 0x02	; 2
     57a:	e8 2e       	mov	r14, r24
	}

	//SetBitMask(ControlReg,0x80); //timer stops
	//Write_MFRC522(CommandReg, PCD_IDLE);
	return status;
}
     57c:	8e 2d       	mov	r24, r14
     57e:	0f 90       	pop	r0
     580:	0f 90       	pop	r0
     582:	cf 91       	pop	r28
     584:	df 91       	pop	r29
     586:	1f 91       	pop	r17
     588:	0f 91       	pop	r16
     58a:	ff 90       	pop	r15
     58c:	ef 90       	pop	r14
     58e:	df 90       	pop	r13
     590:	cf 90       	pop	r12
     592:	bf 90       	pop	r11
     594:	af 90       	pop	r10
     596:	9f 90       	pop	r9
     598:	8f 90       	pop	r8
     59a:	7f 90       	pop	r7
     59c:	5f 90       	pop	r5
     59e:	4f 90       	pop	r4
     5a0:	08 95       	ret

000005a2 <MFRC522_Halt>:
* Function:MFRC522_Halt
* Description:Command the cards into sleep mode
* Input parameters:null
* return:null
*/
void MFRC522_Halt(void){
     5a2:	0f 93       	push	r16
     5a4:	1f 93       	push	r17
     5a6:	df 93       	push	r29
     5a8:	cf 93       	push	r28
     5aa:	00 d0       	rcall	.+0      	; 0x5ac <MFRC522_Halt+0xa>
     5ac:	00 d0       	rcall	.+0      	; 0x5ae <MFRC522_Halt+0xc>
     5ae:	00 d0       	rcall	.+0      	; 0x5b0 <MFRC522_Halt+0xe>
     5b0:	cd b7       	in	r28, 0x3d	; 61
     5b2:	de b7       	in	r29, 0x3e	; 62
	uchar status;
	uint unLen;
	uchar buff[4];
	buff[0] = PICC_HALT;
     5b4:	80 e5       	ldi	r24, 0x50	; 80
     5b6:	8b 83       	std	Y+3, r24	; 0x03
	buff[1] = 0;
     5b8:	1c 82       	std	Y+4, r1	; 0x04
	MFRC522_CalulateCRC(buff, 2, &buff[2]);
     5ba:	8e 01       	movw	r16, r28
     5bc:	0d 5f       	subi	r16, 0xFD	; 253
     5be:	1f 4f       	sbci	r17, 0xFF	; 255
     5c0:	c8 01       	movw	r24, r16
     5c2:	62 e0       	ldi	r22, 0x02	; 2
     5c4:	ae 01       	movw	r20, r28
     5c6:	4b 5f       	subi	r20, 0xFB	; 251
     5c8:	5f 4f       	sbci	r21, 0xFF	; 255
     5ca:	0e 94 ba 01 	call	0x374	; 0x374 <MFRC522_CalulateCRC>
	status = MFRC522_ToCard(PCD_TRANSCEIVE, buff, 4, buff, &unLen);
     5ce:	8c e0       	ldi	r24, 0x0C	; 12
     5d0:	b8 01       	movw	r22, r16
     5d2:	44 e0       	ldi	r20, 0x04	; 4
     5d4:	98 01       	movw	r18, r16
     5d6:	8e 01       	movw	r16, r28
     5d8:	0f 5f       	subi	r16, 0xFF	; 255
     5da:	1f 4f       	sbci	r17, 0xFF	; 255
     5dc:	0e 94 01 02 	call	0x402	; 0x402 <MFRC522_ToCard>
}
     5e0:	26 96       	adiw	r28, 0x06	; 6
     5e2:	0f b6       	in	r0, 0x3f	; 63
     5e4:	f8 94       	cli
     5e6:	de bf       	out	0x3e, r29	; 62
     5e8:	0f be       	out	0x3f, r0	; 63
     5ea:	cd bf       	out	0x3d, r28	; 61
     5ec:	cf 91       	pop	r28
     5ee:	df 91       	pop	r29
     5f0:	1f 91       	pop	r17
     5f2:	0f 91       	pop	r16
     5f4:	08 95       	ret

000005f6 <MFRC522_Write>:
* Function:MFRC522_Write
* Description:write block data
* Input parameters:blockAddr--block address;writeData--Write 16 bytes data into block
* return:return MI_OK if successed
*/
uchar MFRC522_Write(uchar blockAddr, uchar *writeData){
     5f6:	cf 92       	push	r12
     5f8:	df 92       	push	r13
     5fa:	ef 92       	push	r14
     5fc:	ff 92       	push	r15
     5fe:	0f 93       	push	r16
     600:	1f 93       	push	r17
     602:	df 93       	push	r29
     604:	cf 93       	push	r28
     606:	cd b7       	in	r28, 0x3d	; 61
     608:	de b7       	in	r29, 0x3e	; 62
     60a:	64 97       	sbiw	r28, 0x14	; 20
     60c:	0f b6       	in	r0, 0x3f	; 63
     60e:	f8 94       	cli
     610:	de bf       	out	0x3e, r29	; 62
     612:	0f be       	out	0x3f, r0	; 63
     614:	cd bf       	out	0x3d, r28	; 61
     616:	d6 2e       	mov	r13, r22
     618:	c7 2e       	mov	r12, r23
	uchar status;
	uint recvBits;
	uchar i;
	uchar buff[18];
	buff[0] = PICC_WRITE;
     61a:	90 ea       	ldi	r25, 0xA0	; 160
     61c:	9b 83       	std	Y+3, r25	; 0x03
	buff[1] = blockAddr;
     61e:	8c 83       	std	Y+4, r24	; 0x04
	MFRC522_CalulateCRC(buff, 2, &buff[2]);
     620:	73 e0       	ldi	r23, 0x03	; 3
     622:	e7 2e       	mov	r14, r23
     624:	f1 2c       	mov	r15, r1
     626:	ec 0e       	add	r14, r28
     628:	fd 1e       	adc	r15, r29
     62a:	c7 01       	movw	r24, r14
     62c:	62 e0       	ldi	r22, 0x02	; 2
     62e:	ae 01       	movw	r20, r28
     630:	4b 5f       	subi	r20, 0xFB	; 251
     632:	5f 4f       	sbci	r21, 0xFF	; 255
     634:	0e 94 ba 01 	call	0x374	; 0x374 <MFRC522_CalulateCRC>
	status = MFRC522_ToCard(PCD_TRANSCEIVE, buff, 4, buff, &recvBits);
     638:	8c e0       	ldi	r24, 0x0C	; 12
     63a:	b7 01       	movw	r22, r14
     63c:	44 e0       	ldi	r20, 0x04	; 4
     63e:	97 01       	movw	r18, r14
     640:	8e 01       	movw	r16, r28
     642:	0f 5f       	subi	r16, 0xFF	; 255
     644:	1f 4f       	sbci	r17, 0xFF	; 255
     646:	0e 94 01 02 	call	0x402	; 0x402 <MFRC522_ToCard>
	if ((status != MI_OK) || (recvBits != 4) || ((buff[0] & 0x0F) != 0x0A)){
     64a:	88 23       	and	r24, r24
     64c:	99 f5       	brne	.+102    	; 0x6b4 <MFRC522_Write+0xbe>
     64e:	89 81       	ldd	r24, Y+1	; 0x01
     650:	9a 81       	ldd	r25, Y+2	; 0x02
     652:	84 30       	cpi	r24, 0x04	; 4
     654:	91 05       	cpc	r25, r1
     656:	71 f5       	brne	.+92     	; 0x6b4 <MFRC522_Write+0xbe>
     658:	8b 81       	ldd	r24, Y+3	; 0x03
     65a:	8f 70       	andi	r24, 0x0F	; 15
     65c:	8a 30       	cpi	r24, 0x0A	; 10
     65e:	51 f5       	brne	.+84     	; 0x6b4 <MFRC522_Write+0xbe>
     660:	96 01       	movw	r18, r12
     662:	83 2f       	mov	r24, r19
     664:	92 2f       	mov	r25, r18
     666:	dc 01       	movw	r26, r24
     668:	f7 01       	movw	r30, r14
* Function:MFRC522_Write
* Description:write block data
* Input parameters:blockAddr--block address;writeData--Write 16 bytes data into block
* return:return MI_OK if successed
*/
uchar MFRC522_Write(uchar blockAddr, uchar *writeData){
     66a:	ce 01       	movw	r24, r28
     66c:	43 96       	adiw	r24, 0x13	; 19
	if ((status != MI_OK) || (recvBits != 4) || ((buff[0] & 0x0F) != 0x0A)){
		status = MI_ERR;
	}
	if (status == MI_OK){
		for (i = 0; i < 16; i++){	//Write 16 bytes data into FIFO
			buff[i] = *(writeData + i);
     66e:	2d 91       	ld	r18, X+
     670:	21 93       	st	Z+, r18
	status = MFRC522_ToCard(PCD_TRANSCEIVE, buff, 4, buff, &recvBits);
	if ((status != MI_OK) || (recvBits != 4) || ((buff[0] & 0x0F) != 0x0A)){
		status = MI_ERR;
	}
	if (status == MI_OK){
		for (i = 0; i < 16; i++){	//Write 16 bytes data into FIFO
     672:	e8 17       	cp	r30, r24
     674:	f9 07       	cpc	r31, r25
     676:	d9 f7       	brne	.-10     	; 0x66e <MFRC522_Write+0x78>
			buff[i] = *(writeData + i);
		}

		MFRC522_CalulateCRC(buff, 16, &buff[16]);
     678:	8e 01       	movw	r16, r28
     67a:	0d 5f       	subi	r16, 0xFD	; 253
     67c:	1f 4f       	sbci	r17, 0xFF	; 255
     67e:	c8 01       	movw	r24, r16
     680:	60 e1       	ldi	r22, 0x10	; 16
     682:	ae 01       	movw	r20, r28
     684:	4d 5e       	subi	r20, 0xED	; 237
     686:	5f 4f       	sbci	r21, 0xFF	; 255
     688:	0e 94 ba 01 	call	0x374	; 0x374 <MFRC522_CalulateCRC>
		status = MFRC522_ToCard(PCD_TRANSCEIVE, buff, 18, buff, &recvBits);
     68c:	8c e0       	ldi	r24, 0x0C	; 12
     68e:	b8 01       	movw	r22, r16
     690:	42 e1       	ldi	r20, 0x12	; 18
     692:	98 01       	movw	r18, r16
     694:	8e 01       	movw	r16, r28
     696:	0f 5f       	subi	r16, 0xFF	; 255
     698:	1f 4f       	sbci	r17, 0xFF	; 255
     69a:	0e 94 01 02 	call	0x402	; 0x402 <MFRC522_ToCard>
		if ((status != MI_OK) || (recvBits != 4) || ((buff[0] & 0x0F) != 0x0A)){
     69e:	88 23       	and	r24, r24
     6a0:	49 f4       	brne	.+18     	; 0x6b4 <MFRC522_Write+0xbe>
     6a2:	29 81       	ldd	r18, Y+1	; 0x01
     6a4:	3a 81       	ldd	r19, Y+2	; 0x02
     6a6:	24 30       	cpi	r18, 0x04	; 4
     6a8:	31 05       	cpc	r19, r1
     6aa:	21 f4       	brne	.+8      	; 0x6b4 <MFRC522_Write+0xbe>
     6ac:	9b 81       	ldd	r25, Y+3	; 0x03
     6ae:	9f 70       	andi	r25, 0x0F	; 15
     6b0:	9a 30       	cpi	r25, 0x0A	; 10
     6b2:	09 f0       	breq	.+2      	; 0x6b6 <MFRC522_Write+0xc0>
			status = MI_ERR;
     6b4:	82 e0       	ldi	r24, 0x02	; 2
		}
	}

	return status;
}
     6b6:	64 96       	adiw	r28, 0x14	; 20
     6b8:	0f b6       	in	r0, 0x3f	; 63
     6ba:	f8 94       	cli
     6bc:	de bf       	out	0x3e, r29	; 62
     6be:	0f be       	out	0x3f, r0	; 63
     6c0:	cd bf       	out	0x3d, r28	; 61
     6c2:	cf 91       	pop	r28
     6c4:	df 91       	pop	r29
     6c6:	1f 91       	pop	r17
     6c8:	0f 91       	pop	r16
     6ca:	ff 90       	pop	r15
     6cc:	ef 90       	pop	r14
     6ce:	df 90       	pop	r13
     6d0:	cf 90       	pop	r12
     6d2:	08 95       	ret

000006d4 <MFRC522_Read>:
* Function:MFRC522_Read
* Description:Read data
* Input parameters:blockAddr--block address;recvData--the block data which are read
* return:return MI_OK if successed
*/
uchar MFRC522_Read(uchar blockAddr, uchar *recvData){
     6d4:	0f 93       	push	r16
     6d6:	1f 93       	push	r17
     6d8:	df 93       	push	r29
     6da:	cf 93       	push	r28
     6dc:	00 d0       	rcall	.+0      	; 0x6de <MFRC522_Read+0xa>
     6de:	cd b7       	in	r28, 0x3d	; 61
     6e0:	de b7       	in	r29, 0x3e	; 62
     6e2:	8b 01       	movw	r16, r22
	uchar status;
	uint unLen;
	recvData[0] = PICC_READ;
     6e4:	90 e3       	ldi	r25, 0x30	; 48
     6e6:	fb 01       	movw	r30, r22
     6e8:	90 83       	st	Z, r25
	recvData[1] = blockAddr;
     6ea:	81 83       	std	Z+1, r24	; 0x01
	MFRC522_CalulateCRC(recvData, 2, &recvData[2]);
     6ec:	ab 01       	movw	r20, r22
     6ee:	4e 5f       	subi	r20, 0xFE	; 254
     6f0:	5f 4f       	sbci	r21, 0xFF	; 255
     6f2:	cb 01       	movw	r24, r22
     6f4:	62 e0       	ldi	r22, 0x02	; 2
     6f6:	0e 94 ba 01 	call	0x374	; 0x374 <MFRC522_CalulateCRC>
	status = MFRC522_ToCard(PCD_TRANSCEIVE, recvData, 4, recvData, &unLen);
     6fa:	8c e0       	ldi	r24, 0x0C	; 12
     6fc:	b8 01       	movw	r22, r16
     6fe:	44 e0       	ldi	r20, 0x04	; 4
     700:	98 01       	movw	r18, r16
     702:	8e 01       	movw	r16, r28
     704:	0f 5f       	subi	r16, 0xFF	; 255
     706:	1f 4f       	sbci	r17, 0xFF	; 255
     708:	0e 94 01 02 	call	0x402	; 0x402 <MFRC522_ToCard>
	if ((status != MI_OK) || (unLen != 0x90)){
     70c:	88 23       	and	r24, r24
     70e:	29 f4       	brne	.+10     	; 0x71a <MFRC522_Read+0x46>
     710:	29 81       	ldd	r18, Y+1	; 0x01
     712:	3a 81       	ldd	r19, Y+2	; 0x02
     714:	20 39       	cpi	r18, 0x90	; 144
     716:	31 05       	cpc	r19, r1
     718:	09 f0       	breq	.+2      	; 0x71c <MFRC522_Read+0x48>
		status = MI_ERR;
     71a:	82 e0       	ldi	r24, 0x02	; 2
	}
	return status;
}
     71c:	0f 90       	pop	r0
     71e:	0f 90       	pop	r0
     720:	cf 91       	pop	r28
     722:	df 91       	pop	r29
     724:	1f 91       	pop	r17
     726:	0f 91       	pop	r16
     728:	08 95       	ret

0000072a <MFRC522_Auth>:
BlockAddr--Block address
Sectorkey--Block password
serNum--Card serial number ,4 bytes
* return:return MI_OK if successed
*/
uchar MFRC522_Auth(uchar authMode, uchar BlockAddr, uchar *Sectorkey, uchar *serNum){
     72a:	0f 93       	push	r16
     72c:	1f 93       	push	r17
     72e:	df 93       	push	r29
     730:	cf 93       	push	r28
     732:	cd b7       	in	r28, 0x3d	; 61
     734:	de b7       	in	r29, 0x3e	; 62
     736:	2e 97       	sbiw	r28, 0x0e	; 14
     738:	0f b6       	in	r0, 0x3f	; 63
     73a:	f8 94       	cli
     73c:	de bf       	out	0x3e, r29	; 62
     73e:	0f be       	out	0x3f, r0	; 63
     740:	cd bf       	out	0x3d, r28	; 61
     742:	f9 01       	movw	r30, r18
	uchar status;
	uint recvBits;
	uchar i;
	uchar buff[12];
	//Verify command + block address + buffer password + card SN
	buff[0] = authMode;
     744:	8b 83       	std	Y+3, r24	; 0x03
	buff[1] = BlockAddr;
     746:	6c 83       	std	Y+4, r22	; 0x04
     748:	84 2f       	mov	r24, r20
     74a:	95 2f       	mov	r25, r21
     74c:	be 01       	movw	r22, r28
     74e:	6b 5f       	subi	r22, 0xFB	; 251
     750:	7f 4f       	sbci	r23, 0xFF	; 255
BlockAddr--Block address
Sectorkey--Block password
serNum--Card serial number ,4 bytes
* return:return MI_OK if successed
*/
uchar MFRC522_Auth(uchar authMode, uchar BlockAddr, uchar *Sectorkey, uchar *serNum){
     752:	9e 01       	movw	r18, r28
     754:	25 5f       	subi	r18, 0xF5	; 245
     756:	3f 4f       	sbci	r19, 0xFF	; 255
	uchar buff[12];
	//Verify command + block address + buffer password + card SN
	buff[0] = authMode;
	buff[1] = BlockAddr;
	for (i = 0; i < 6; i++){
		buff[i + 2] = *(Sectorkey + i);
     758:	dc 01       	movw	r26, r24
     75a:	4d 91       	ld	r20, X+
     75c:	cd 01       	movw	r24, r26
     75e:	db 01       	movw	r26, r22
     760:	4d 93       	st	X+, r20
     762:	bd 01       	movw	r22, r26
	uchar i;
	uchar buff[12];
	//Verify command + block address + buffer password + card SN
	buff[0] = authMode;
	buff[1] = BlockAddr;
	for (i = 0; i < 6; i++){
     764:	a2 17       	cp	r26, r18
     766:	b3 07       	cpc	r27, r19
     768:	b9 f7       	brne	.-18     	; 0x758 <MFRC522_Auth+0x2e>
		buff[i + 2] = *(Sectorkey + i);
	}

	for (i = 0; i < 4; i++){
		buff[i + 8] = *(serNum + i);
     76a:	80 81       	ld	r24, Z
     76c:	8b 87       	std	Y+11, r24	; 0x0b
     76e:	81 81       	ldd	r24, Z+1	; 0x01
     770:	8c 87       	std	Y+12, r24	; 0x0c
     772:	82 81       	ldd	r24, Z+2	; 0x02
     774:	8d 87       	std	Y+13, r24	; 0x0d
     776:	83 81       	ldd	r24, Z+3	; 0x03
     778:	8e 87       	std	Y+14, r24	; 0x0e
	}

	status = MFRC522_ToCard(PCD_AUTHENT, buff, 12, buff, &recvBits);
     77a:	9e 01       	movw	r18, r28
     77c:	2d 5f       	subi	r18, 0xFD	; 253
     77e:	3f 4f       	sbci	r19, 0xFF	; 255
     780:	8e e0       	ldi	r24, 0x0E	; 14
     782:	b9 01       	movw	r22, r18
     784:	4c e0       	ldi	r20, 0x0C	; 12
     786:	8e 01       	movw	r16, r28
     788:	0f 5f       	subi	r16, 0xFF	; 255
     78a:	1f 4f       	sbci	r17, 0xFF	; 255
     78c:	0e 94 01 02 	call	0x402	; 0x402 <MFRC522_ToCard>
     790:	18 2f       	mov	r17, r24
	if ((status != MI_OK) || (!(Read_MFRC522(Status2Reg) & 0x08))){
     792:	88 23       	and	r24, r24
     794:	21 f4       	brne	.+8      	; 0x79e <MFRC522_Auth+0x74>
     796:	88 e0       	ldi	r24, 0x08	; 8
     798:	0e 94 82 01 	call	0x304	; 0x304 <Read_MFRC522>
     79c:	83 ff       	sbrs	r24, 3
		status = MI_ERR;
     79e:	12 e0       	ldi	r17, 0x02	; 2
	}
	return status;
}
     7a0:	81 2f       	mov	r24, r17
     7a2:	2e 96       	adiw	r28, 0x0e	; 14
     7a4:	0f b6       	in	r0, 0x3f	; 63
     7a6:	f8 94       	cli
     7a8:	de bf       	out	0x3e, r29	; 62
     7aa:	0f be       	out	0x3f, r0	; 63
     7ac:	cd bf       	out	0x3d, r28	; 61
     7ae:	cf 91       	pop	r28
     7b0:	df 91       	pop	r29
     7b2:	1f 91       	pop	r17
     7b4:	0f 91       	pop	r16
     7b6:	08 95       	ret

000007b8 <MFRC522_SelectTag>:
* Function:MFRC522_SelectTag
* Description:Select card, read card storage volume
* Input parameter:serNum--Send card serial number
* return:return the card storage volume
*/
uchar MFRC522_SelectTag(uchar *serNum){
     7b8:	0f 93       	push	r16
     7ba:	1f 93       	push	r17
     7bc:	df 93       	push	r29
     7be:	cf 93       	push	r28
     7c0:	cd b7       	in	r28, 0x3d	; 61
     7c2:	de b7       	in	r29, 0x3e	; 62
     7c4:	2b 97       	sbiw	r28, 0x0b	; 11
     7c6:	0f b6       	in	r0, 0x3f	; 63
     7c8:	f8 94       	cli
     7ca:	de bf       	out	0x3e, r29	; 62
     7cc:	0f be       	out	0x3f, r0	; 63
     7ce:	cd bf       	out	0x3d, r28	; 61
	uchar status;
	uchar size;
	uint recvBits;
	uchar buffer[9];
	//ClearBitMask(Status2Reg, 0x08); //MFCrypto1On=0
	buffer[0] = PICC_SElECTTAG;
     7d0:	23 e9       	ldi	r18, 0x93	; 147
     7d2:	2b 83       	std	Y+3, r18	; 0x03
	buffer[1] = 0x70;
     7d4:	20 e7       	ldi	r18, 0x70	; 112
     7d6:	2c 83       	std	Y+4, r18	; 0x04
     7d8:	28 2f       	mov	r18, r24
     7da:	39 2f       	mov	r19, r25
     7dc:	d9 01       	movw	r26, r18
     7de:	fe 01       	movw	r30, r28
     7e0:	35 96       	adiw	r30, 0x05	; 5
* Function:MFRC522_SelectTag
* Description:Select card, read card storage volume
* Input parameter:serNum--Send card serial number
* return:return the card storage volume
*/
uchar MFRC522_SelectTag(uchar *serNum){
     7e2:	ce 01       	movw	r24, r28
     7e4:	0a 96       	adiw	r24, 0x0a	; 10
	uchar buffer[9];
	//ClearBitMask(Status2Reg, 0x08); //MFCrypto1On=0
	buffer[0] = PICC_SElECTTAG;
	buffer[1] = 0x70;
	for (i = 0; i < 5; i++){
		buffer[i + 2] = *(serNum + i);
     7e6:	2d 91       	ld	r18, X+
     7e8:	21 93       	st	Z+, r18
	uint recvBits;
	uchar buffer[9];
	//ClearBitMask(Status2Reg, 0x08); //MFCrypto1On=0
	buffer[0] = PICC_SElECTTAG;
	buffer[1] = 0x70;
	for (i = 0; i < 5; i++){
     7ea:	e8 17       	cp	r30, r24
     7ec:	f9 07       	cpc	r31, r25
     7ee:	d9 f7       	brne	.-10     	; 0x7e6 <MFRC522_SelectTag+0x2e>
		buffer[i + 2] = *(serNum + i);
	}

	MFRC522_CalulateCRC(buffer, 7, &buffer[7]);	//??
     7f0:	8e 01       	movw	r16, r28
     7f2:	0d 5f       	subi	r16, 0xFD	; 253
     7f4:	1f 4f       	sbci	r17, 0xFF	; 255
     7f6:	c8 01       	movw	r24, r16
     7f8:	67 e0       	ldi	r22, 0x07	; 7
     7fa:	ae 01       	movw	r20, r28
     7fc:	46 5f       	subi	r20, 0xF6	; 246
     7fe:	5f 4f       	sbci	r21, 0xFF	; 255
     800:	0e 94 ba 01 	call	0x374	; 0x374 <MFRC522_CalulateCRC>
	status = MFRC522_ToCard(PCD_TRANSCEIVE, buffer, 9, buffer, &recvBits);
     804:	8c e0       	ldi	r24, 0x0C	; 12
     806:	b8 01       	movw	r22, r16
     808:	49 e0       	ldi	r20, 0x09	; 9
     80a:	98 01       	movw	r18, r16
     80c:	8e 01       	movw	r16, r28
     80e:	0f 5f       	subi	r16, 0xFF	; 255
     810:	1f 4f       	sbci	r17, 0xFF	; 255
     812:	0e 94 01 02 	call	0x402	; 0x402 <MFRC522_ToCard>
	if ((status == MI_OK) && (recvBits == 0x18)){
     816:	88 23       	and	r24, r24
     818:	39 f4       	brne	.+14     	; 0x828 <MFRC522_SelectTag+0x70>
     81a:	89 81       	ldd	r24, Y+1	; 0x01
     81c:	9a 81       	ldd	r25, Y+2	; 0x02
     81e:	88 31       	cpi	r24, 0x18	; 24
     820:	91 05       	cpc	r25, r1
     822:	11 f4       	brne	.+4      	; 0x828 <MFRC522_SelectTag+0x70>
		size = buffer[0];
     824:	8b 81       	ldd	r24, Y+3	; 0x03
     826:	01 c0       	rjmp	.+2      	; 0x82a <MFRC522_SelectTag+0x72>
	}else{
		size = 0;
     828:	80 e0       	ldi	r24, 0x00	; 0
	}
	return size;
}
     82a:	2b 96       	adiw	r28, 0x0b	; 11
     82c:	0f b6       	in	r0, 0x3f	; 63
     82e:	f8 94       	cli
     830:	de bf       	out	0x3e, r29	; 62
     832:	0f be       	out	0x3f, r0	; 63
     834:	cd bf       	out	0x3d, r28	; 61
     836:	cf 91       	pop	r28
     838:	df 91       	pop	r29
     83a:	1f 91       	pop	r17
     83c:	0f 91       	pop	r16
     83e:	08 95       	ret

00000840 <MFRC522_Anticoll>:
* Function:MFRC522_Anticoll
* Description:Prevent conflict, read the card serial number
* Input parameter:serNum--return the 4 bytes card serial number, the 5th byte is recheck byte
* return:return MI_OK if successed
*/
uchar MFRC522_Anticoll(uchar *serNum){
     840:	ef 92       	push	r14
     842:	ff 92       	push	r15
     844:	0f 93       	push	r16
     846:	1f 93       	push	r17
     848:	df 93       	push	r29
     84a:	cf 93       	push	r28
     84c:	00 d0       	rcall	.+0      	; 0x84e <MFRC522_Anticoll+0xe>
     84e:	cd b7       	in	r28, 0x3d	; 61
     850:	de b7       	in	r29, 0x3e	; 62
     852:	7c 01       	movw	r14, r24
	uchar i;
	uchar serNumCheck = 0;
	uint unLen;
	//ClearBitMask(Status2Reg, 0x08); //TempSensclear
	//ClearBitMask(CollReg,0x80); //ValuesAfterColl
	Write_MFRC522(BitFramingReg, 0x00);	//TxLastBists = BitFramingReg[2..0]
     854:	8d e0       	ldi	r24, 0x0D	; 13
     856:	60 e0       	ldi	r22, 0x00	; 0
     858:	0e 94 6e 01 	call	0x2dc	; 0x2dc <Write_MFRC522>
	serNum[0] = PICC_ANTICOLL;
     85c:	83 e9       	ldi	r24, 0x93	; 147
     85e:	f7 01       	movw	r30, r14
     860:	80 83       	st	Z, r24
	serNum[1] = 0x20;
     862:	80 e2       	ldi	r24, 0x20	; 32
     864:	81 83       	std	Z+1, r24	; 0x01
	status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
     866:	8c e0       	ldi	r24, 0x0C	; 12
     868:	b7 01       	movw	r22, r14
     86a:	42 e0       	ldi	r20, 0x02	; 2
     86c:	97 01       	movw	r18, r14
     86e:	8e 01       	movw	r16, r28
     870:	0f 5f       	subi	r16, 0xFF	; 255
     872:	1f 4f       	sbci	r17, 0xFF	; 255
     874:	0e 94 01 02 	call	0x402	; 0x402 <MFRC522_ToCard>
	if (status == MI_OK){
     878:	88 23       	and	r24, r24
     87a:	61 f4       	brne	.+24     	; 0x894 <__stack+0x35>
     87c:	f7 01       	movw	r30, r14
     87e:	90 e0       	ldi	r25, 0x00	; 0
     880:	20 e0       	ldi	r18, 0x00	; 0
		//Verify card serial number
		for (i = 0; i < 4; i++){
			serNumCheck ^= serNum[i];
     882:	31 91       	ld	r19, Z+
     884:	93 27       	eor	r25, r19
	serNum[0] = PICC_ANTICOLL;
	serNum[1] = 0x20;
	status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
	if (status == MI_OK){
		//Verify card serial number
		for (i = 0; i < 4; i++){
     886:	2f 5f       	subi	r18, 0xFF	; 255
     888:	24 30       	cpi	r18, 0x04	; 4
     88a:	d9 f7       	brne	.-10     	; 0x882 <__stack+0x23>
			serNumCheck ^= serNum[i];
		}
		if (serNumCheck != serNum[i]){
     88c:	f7 01       	movw	r30, r14
     88e:	24 81       	ldd	r18, Z+4	; 0x04
     890:	92 13       	cpse	r25, r18
			status = MI_ERR;
     892:	82 e0       	ldi	r24, 0x02	; 2
		}
	}
	//SetBitMask(CollReg, 0x80); //ValuesAfterColl=1
	return status;
}
     894:	0f 90       	pop	r0
     896:	0f 90       	pop	r0
     898:	cf 91       	pop	r28
     89a:	df 91       	pop	r29
     89c:	1f 91       	pop	r17
     89e:	0f 91       	pop	r16
     8a0:	ff 90       	pop	r15
     8a2:	ef 90       	pop	r14
     8a4:	08 95       	ret

000008a6 <MFRC522_Request>:
* 0x0200 = Mifare_One(S70)
* 0x0800 = Mifare_Pro(X)
* 0x4403 = Mifare_DESFire
* return:return MI_OK if successed
*/
unsigned char MFRC522_Request(uchar reqMode, uchar *TagType){
     8a6:	ff 92       	push	r15
     8a8:	0f 93       	push	r16
     8aa:	1f 93       	push	r17
     8ac:	df 93       	push	r29
     8ae:	cf 93       	push	r28
     8b0:	00 d0       	rcall	.+0      	; 0x8b2 <MFRC522_Request+0xc>
     8b2:	cd b7       	in	r28, 0x3d	; 61
     8b4:	de b7       	in	r29, 0x3e	; 62
     8b6:	f8 2e       	mov	r15, r24
     8b8:	8b 01       	movw	r16, r22
	uchar status;
	uint backBits;	//the data bits that received
	Write_MFRC522(BitFramingReg, 0x07);	//TxLastBists = BitFramingReg[2..0] ???
     8ba:	8d e0       	ldi	r24, 0x0D	; 13
     8bc:	67 e0       	ldi	r22, 0x07	; 7
     8be:	0e 94 6e 01 	call	0x2dc	; 0x2dc <Write_MFRC522>
	TagType[0] = reqMode;
     8c2:	f8 01       	movw	r30, r16
     8c4:	f0 82       	st	Z, r15
	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
     8c6:	8c e0       	ldi	r24, 0x0C	; 12
     8c8:	b8 01       	movw	r22, r16
     8ca:	41 e0       	ldi	r20, 0x01	; 1
     8cc:	98 01       	movw	r18, r16
     8ce:	8e 01       	movw	r16, r28
     8d0:	0f 5f       	subi	r16, 0xFF	; 255
     8d2:	1f 4f       	sbci	r17, 0xFF	; 255
     8d4:	0e 94 01 02 	call	0x402	; 0x402 <MFRC522_ToCard>
	if ((status != MI_OK) || (backBits != 0x10)){
     8d8:	88 23       	and	r24, r24
     8da:	29 f4       	brne	.+10     	; 0x8e6 <MFRC522_Request+0x40>
     8dc:	29 81       	ldd	r18, Y+1	; 0x01
     8de:	3a 81       	ldd	r19, Y+2	; 0x02
     8e0:	20 31       	cpi	r18, 0x10	; 16
     8e2:	31 05       	cpc	r19, r1
     8e4:	09 f0       	breq	.+2      	; 0x8e8 <MFRC522_Request+0x42>
		status = MI_ERR;
     8e6:	82 e0       	ldi	r24, 0x02	; 2
	}
	
	return status;
}
     8e8:	0f 90       	pop	r0
     8ea:	0f 90       	pop	r0
     8ec:	cf 91       	pop	r28
     8ee:	df 91       	pop	r29
     8f0:	1f 91       	pop	r17
     8f2:	0f 91       	pop	r16
     8f4:	ff 90       	pop	r15
     8f6:	08 95       	ret

000008f8 <MFRC522_AntennaOn>:
* Input parameter:null
* Return:null
*/
void MFRC522_AntennaOn(void){
	uchar temp;
	temp = Read_MFRC522(TxControlReg);
     8f8:	84 e1       	ldi	r24, 0x14	; 20
     8fa:	0e 94 82 01 	call	0x304	; 0x304 <Read_MFRC522>
	if (!(temp & 0x03)){
     8fe:	90 e0       	ldi	r25, 0x00	; 0
     900:	83 70       	andi	r24, 0x03	; 3
     902:	90 70       	andi	r25, 0x00	; 0
     904:	00 97       	sbiw	r24, 0x00	; 0
     906:	21 f4       	brne	.+8      	; 0x910 <MFRC522_AntennaOn+0x18>
		MFRC522_SetBitMask(TxControlReg, 0x03);
     908:	84 e1       	ldi	r24, 0x14	; 20
     90a:	63 e0       	ldi	r22, 0x03	; 3
     90c:	0e 94 91 01 	call	0x322	; 0x322 <MFRC522_SetBitMask>
     910:	08 95       	ret

00000912 <MFRC522_Init>:
void MFRC522_Reset(void){
	Write_MFRC522(CommandReg, PCD_RESETPHASE);
}

void MFRC522_Init(void){
	spi_init(CLOCKDIV16 | (1<<SPI2X));
     912:	81 e0       	ldi	r24, 0x01	; 1
     914:	0e 94 5f 01 	call	0x2be	; 0x2be <spi_init>

	// Setup the Pins
	
	pinSlaveSelect_OUTPUT; // Set digital pin 10 as OUTPUT to connect it to the RFID /ENABLE pin
     918:	bc 9a       	sbi	0x17, 4	; 23
	pinSlaveSelect_LOW; // Activate the RFID reader
     91a:	c4 98       	cbi	0x18, 4	; 24
	pinReset_OUTPUT; // Set digital pin 10 , Not Reset and Power-down
     91c:	d1 9a       	sbi	0x1a, 1	; 26
	pinReset_LOW;
     91e:	d9 98       	cbi	0x1b, 1	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     920:	8f ec       	ldi	r24, 0xCF	; 207
     922:	97 e0       	ldi	r25, 0x07	; 7
     924:	01 97       	sbiw	r24, 0x01	; 1
     926:	f1 f7       	brne	.-4      	; 0x924 <MFRC522_Init+0x12>
     928:	00 c0       	rjmp	.+0      	; 0x92a <MFRC522_Init+0x18>
     92a:	00 00       	nop
	_delay_ms(1);
	// activate
	pinReset_HIGH;
     92c:	d9 9a       	sbi	0x1b, 1	; 27

	MFRC522_Reset();
     92e:	0e 94 8c 01 	call	0x318	; 0x318 <MFRC522_Reset>

	//Timer: TPrescaler*TreloadVal/6.78MHz = 24ms
	Write_MFRC522(TModeReg, 0x8D);	//Tauto=1; f(Timer) = 6.78MHz/TPreScaler
     932:	8a e2       	ldi	r24, 0x2A	; 42
     934:	6d e8       	ldi	r22, 0x8D	; 141
     936:	0e 94 6e 01 	call	0x2dc	; 0x2dc <Write_MFRC522>
	Write_MFRC522(TPrescalerReg, 0x3E);	//TModeReg[3..0] + TPrescalerReg
     93a:	8b e2       	ldi	r24, 0x2B	; 43
     93c:	6e e3       	ldi	r22, 0x3E	; 62
     93e:	0e 94 6e 01 	call	0x2dc	; 0x2dc <Write_MFRC522>
	Write_MFRC522(TReloadRegL, 30);
     942:	8d e2       	ldi	r24, 0x2D	; 45
     944:	6e e1       	ldi	r22, 0x1E	; 30
     946:	0e 94 6e 01 	call	0x2dc	; 0x2dc <Write_MFRC522>
	Write_MFRC522(TReloadRegH, 0);
     94a:	8c e2       	ldi	r24, 0x2C	; 44
     94c:	60 e0       	ldi	r22, 0x00	; 0
     94e:	0e 94 6e 01 	call	0x2dc	; 0x2dc <Write_MFRC522>
	Write_MFRC522(TxAutoReg, 0x40);	//100%ASK
     952:	85 e1       	ldi	r24, 0x15	; 21
     954:	60 e4       	ldi	r22, 0x40	; 64
     956:	0e 94 6e 01 	call	0x2dc	; 0x2dc <Write_MFRC522>
	Write_MFRC522(ModeReg, 0x3D);	//CRC initilizate value 0x6363 ???
     95a:	81 e1       	ldi	r24, 0x11	; 17
     95c:	6d e3       	ldi	r22, 0x3D	; 61
     95e:	0e 94 6e 01 	call	0x2dc	; 0x2dc <Write_MFRC522>
	//ClearBitMask(Status2Reg, 0x08); //MFCrypto1On=0
	//Write_MFRC522(RxSelReg, 0x86); //RxWait = RxSelReg[5..0]
	//Write_MFRC522(RFCfgReg, 0x7F); //RxGain = 48dB
	//Write_MFRC522(GsNReg, 0xFF);
	//Write_MFRC522(CWGsPReg, 0xFF);
	MFRC522_AntennaOn();	//turn on antenna
     962:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <MFRC522_AntennaOn>
}
     966:	08 95       	ret

00000968 <MFRC522_AntennaOff>:
* Description:Turn off antenna, every time turn on or shut down antenna need at least 1ms delay
* Input parameter:null
* Return:null
*/
void MFRC522_AntennaOff(void){
	MFRC522_ClearBitMask(TxControlReg, 0x03);
     968:	84 e1       	ldi	r24, 0x14	; 20
     96a:	63 e0       	ldi	r22, 0x03	; 3
     96c:	0e 94 a5 01 	call	0x34a	; 0x34a <MFRC522_ClearBitMask>
}
     970:	08 95       	ret

00000972 <uart_init>:
int8_t Temperature = 0;


void uart_init() {
    unsigned int ubrr = 103;
    UBRRH = (unsigned char)(ubrr>>8);  // ??????? ????
     972:	10 bc       	out	0x20, r1	; 32
    UBRRL = (unsigned char)ubrr;       // ??????? ????
     974:	87 e6       	ldi	r24, 0x67	; 103
     976:	89 b9       	out	0x09, r24	; 9
    UCSRB = (1<<RXEN) | (1<<TXEN);     // ???????? ???????? ? ??????????
     978:	88 e1       	ldi	r24, 0x18	; 24
     97a:	8a b9       	out	0x0a, r24	; 10
    UCSRC = (1<<URSEL) | (1<<UCSZ1) | (1<<UCSZ0);
     97c:	86 e8       	ldi	r24, 0x86	; 134
     97e:	80 bd       	out	0x20, r24	; 32
}
     980:	08 95       	ret

00000982 <uart_transmit>:

void uart_transmit(unsigned char data) {
    while (!(UCSRA & (1<<UDRE)));  // ????, ???? ??????? ???????? ????? ????????
     982:	5d 9b       	sbis	0x0b, 5	; 11
     984:	fe cf       	rjmp	.-4      	; 0x982 <uart_transmit>
    UDR = data;  // ???????? ??????
     986:	8c b9       	out	0x0c, r24	; 12
}
     988:	08 95       	ret

0000098a <uart_send_string>:

void uart_send_string(const char *str) {
     98a:	ef 92       	push	r14
     98c:	ff 92       	push	r15
     98e:	cf 93       	push	r28
     990:	df 93       	push	r29
     992:	e8 2e       	mov	r14, r24
     994:	e7 01       	movw	r28, r14
     996:	7e 01       	movw	r14, r28
     998:	f9 2e       	mov	r15, r25
     99a:	e7 01       	movw	r28, r14
    while(*str) {
     99c:	02 c0       	rjmp	.+4      	; 0x9a2 <uart_send_string+0x18>
        uart_transmit(*str);
     99e:	0e 94 c1 04 	call	0x982	; 0x982 <uart_transmit>
    while (!(UCSRA & (1<<UDRE)));  // ????, ???? ??????? ???????? ????? ????????
    UDR = data;  // ???????? ??????
}

void uart_send_string(const char *str) {
    while(*str) {
     9a2:	89 91       	ld	r24, Y+
     9a4:	88 23       	and	r24, r24
     9a6:	d9 f7       	brne	.-10     	; 0x99e <uart_send_string+0x14>
        uart_transmit(*str);
        str++;
    }
}
     9a8:	df 91       	pop	r29
     9aa:	cf 91       	pop	r28
     9ac:	ff 90       	pop	r15
     9ae:	ef 90       	pop	r14
     9b0:	08 95       	ret

000009b2 <uart_receive>:

unsigned char uart_receive(void) {
    while (!(UCSRA & (1<<RXC)));  // ????, ???? ? ???????? ???? ??????
     9b2:	5f 9b       	sbis	0x0b, 7	; 11
     9b4:	fe cf       	rjmp	.-4      	; 0x9b2 <uart_receive>
    return UDR;  // ?????????? ???????? ????
     9b6:	8c b1       	in	r24, 0x0c	; 12
}
     9b8:	08 95       	ret

000009ba <uart_receive_string>:

void uart_receive_string(char *str, unsigned int max_len) {
     9ba:	cf 92       	push	r12
     9bc:	df 92       	push	r13
     9be:	ef 92       	push	r14
     9c0:	ff 92       	push	r15
     9c2:	0f 93       	push	r16
     9c4:	1f 93       	push	r17
     9c6:	cf 93       	push	r28
     9c8:	df 93       	push	r29
     9ca:	6c 01       	movw	r12, r24
     9cc:	8b 01       	movw	r16, r22
    unsigned int i = 0;
     9ce:	7c 01       	movw	r14, r24
     9d0:	c0 e0       	ldi	r28, 0x00	; 0
     9d2:	d0 e0       	ldi	r29, 0x00	; 0
    while (i < max_len - 1) {
     9d4:	01 50       	subi	r16, 0x01	; 1
     9d6:	10 40       	sbci	r17, 0x00	; 0
     9d8:	08 c0       	rjmp	.+16     	; 0x9ea <uart_receive_string+0x30>
        str[i] = uart_receive();  // ????????? ??????
     9da:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <uart_receive>
     9de:	f7 01       	movw	r30, r14
     9e0:	81 93       	st	Z+, r24
     9e2:	7f 01       	movw	r14, r30
        if (str[i] == '\n') {  // ????? ??????
     9e4:	8a 30       	cpi	r24, 0x0A	; 10
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <uart_receive_string+0x36>
            break;
        }
        i++;
     9e8:	21 96       	adiw	r28, 0x01	; 1
    return UDR;  // ?????????? ???????? ????
}

void uart_receive_string(char *str, unsigned int max_len) {
    unsigned int i = 0;
    while (i < max_len - 1) {
     9ea:	c0 17       	cp	r28, r16
     9ec:	d1 07       	cpc	r29, r17
     9ee:	a8 f3       	brcs	.-22     	; 0x9da <uart_receive_string+0x20>
        if (str[i] == '\n') {  // ????? ??????
            break;
        }
        i++;
    }
    str[i] = '\0';  // ??????????? ??????? ??????
     9f0:	cc 0d       	add	r28, r12
     9f2:	dd 1d       	adc	r29, r13
     9f4:	18 82       	st	Y, r1
}
     9f6:	df 91       	pop	r29
     9f8:	cf 91       	pop	r28
     9fa:	1f 91       	pop	r17
     9fc:	0f 91       	pop	r16
     9fe:	ff 90       	pop	r15
     a00:	ef 90       	pop	r14
     a02:	df 90       	pop	r13
     a04:	cf 90       	pop	r12
     a06:	08 95       	ret

00000a08 <lcd_putchar_auto>:
#define LCD_MAX_ROWS 2   // ?????????? ????? ?? ???????

static char lcd_current_col = 0;  // ??????? ???????
static char lcd_current_row = 0;  // ??????? ??????

void lcd_putchar_auto(char c) {
     a08:	1f 93       	push	r17
     a0a:	18 2f       	mov	r17, r24
    if (lcd_current_col >= LCD_MAX_COLS) {
     a0c:	80 91 d7 00 	lds	r24, 0x00D7
     a10:	80 31       	cpi	r24, 0x10	; 16
     a12:	80 f0       	brcs	.+32     	; 0xa34 <lcd_putchar_auto+0x2c>
        lcd_current_col = 0;
     a14:	10 92 d7 00 	sts	0x00D7, r1
        lcd_current_row++;
     a18:	80 91 d8 00 	lds	r24, 0x00D8
     a1c:	8f 5f       	subi	r24, 0xFF	; 255
     a1e:	80 93 d8 00 	sts	0x00D8, r24
        if (lcd_current_row >= LCD_MAX_ROWS) {
     a22:	82 30       	cpi	r24, 0x02	; 2
     a24:	10 f0       	brcs	.+4      	; 0xa2a <lcd_putchar_auto+0x22>
            lcd_current_row = 0;  // ????????? ?? ?????? ??????, ???? ??? ?????? ?????????
     a26:	10 92 d8 00 	sts	0x00D8, r1
        }
        lcd_gotoxy(lcd_current_col, lcd_current_row);
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	60 91 d8 00 	lds	r22, 0x00D8
     a30:	0e 94 41 01 	call	0x282	; 0x282 <lcd_gotoxy>
    }

    lcd_putchar(c);  // ?????????? ???????????? ??????? ??? ?????? ???????
     a34:	81 2f       	mov	r24, r17
     a36:	0e 94 cc 00 	call	0x198	; 0x198 <lcd_putchar>
    lcd_current_col++;
     a3a:	80 91 d7 00 	lds	r24, 0x00D7
     a3e:	8f 5f       	subi	r24, 0xFF	; 255
     a40:	80 93 d7 00 	sts	0x00D7, r24
}
     a44:	1f 91       	pop	r17
     a46:	08 95       	ret

00000a48 <lcd_putstring_auto>:

void lcd_putstring_auto (char stroka[])
{  char i;
     a48:	1f 93       	push	r17
     a4a:	cf 93       	push	r28
     a4c:	df 93       	push	r29
     a4e:	ec 01       	movw	r28, r24
   for(i=0;stroka[i]!='\0';i++)
     a50:	10 e0       	ldi	r17, 0x00	; 0
     a52:	03 c0       	rjmp	.+6      	; 0xa5a <lcd_putstring_auto+0x12>
   lcd_putchar_auto(stroka[i]);
     a54:	0e 94 04 05 	call	0xa08	; 0xa08 <lcd_putchar_auto>
    lcd_current_col++;
}

void lcd_putstring_auto (char stroka[])
{  char i;
   for(i=0;stroka[i]!='\0';i++)
     a58:	1f 5f       	subi	r17, 0xFF	; 255
     a5a:	fe 01       	movw	r30, r28
     a5c:	e1 0f       	add	r30, r17
     a5e:	f1 1d       	adc	r31, r1
     a60:	80 81       	ld	r24, Z
     a62:	88 23       	and	r24, r24
     a64:	b9 f7       	brne	.-18     	; 0xa54 <lcd_putstring_auto+0xc>
   lcd_putchar_auto(stroka[i]);
}
     a66:	df 91       	pop	r29
     a68:	cf 91       	pop	r28
     a6a:	1f 91       	pop	r17
     a6c:	08 95       	ret

00000a6e <clear_temp_data>:

void clear_temp_data(char* operation_symbol, char* buffer, char* uart_buffer, uchar* card_num, size_t buffer_size, size_t uart_buffer_size, size_t card_num_size)
{
     a6e:	af 92       	push	r10
     a70:	bf 92       	push	r11
     a72:	cf 92       	push	r12
     a74:	df 92       	push	r13
     a76:	ef 92       	push	r14
     a78:	ff 92       	push	r15
     a7a:	0f 93       	push	r16
     a7c:	1f 93       	push	r17
     a7e:	df 93       	push	r29
     a80:	cf 93       	push	r28
     a82:	00 d0       	rcall	.+0      	; 0xa84 <clear_temp_data+0x16>
     a84:	cd b7       	in	r28, 0x3d	; 61
     a86:	de b7       	in	r29, 0x3e	; 62
     a88:	fc 01       	movw	r30, r24
     a8a:	cb 01       	movw	r24, r22
     a8c:	b4 2e       	mov	r11, r20
     a8e:	a5 2e       	mov	r10, r21
     a90:	a8 01       	movw	r20, r16
    *operation_symbol = 'e';
     a92:	65 e6       	ldi	r22, 0x65	; 101
     a94:	60 83       	st	Z, r22
    memset(buffer, 0, buffer_size);
     a96:	60 e0       	ldi	r22, 0x00	; 0
     a98:	70 e0       	ldi	r23, 0x00	; 0
     a9a:	29 83       	std	Y+1, r18	; 0x01
     a9c:	3a 83       	std	Y+2, r19	; 0x02
     a9e:	0e 94 84 07 	call	0xf08	; 0xf08 <memset>
    memset(uart_buffer, 0, uart_buffer_size);
     aa2:	8b 2d       	mov	r24, r11
     aa4:	9a 2d       	mov	r25, r10
     aa6:	60 e0       	ldi	r22, 0x00	; 0
     aa8:	70 e0       	ldi	r23, 0x00	; 0
     aaa:	a7 01       	movw	r20, r14
     aac:	0e 94 84 07 	call	0xf08	; 0xf08 <memset>
    memset(card_num, 0, card_num_size);
     ab0:	29 81       	ldd	r18, Y+1	; 0x01
     ab2:	82 2f       	mov	r24, r18
     ab4:	3a 81       	ldd	r19, Y+2	; 0x02
     ab6:	93 2f       	mov	r25, r19
     ab8:	60 e0       	ldi	r22, 0x00	; 0
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	a6 01       	movw	r20, r12
     abe:	0e 94 84 07 	call	0xf08	; 0xf08 <memset>
}
     ac2:	0f 90       	pop	r0
     ac4:	0f 90       	pop	r0
     ac6:	cf 91       	pop	r28
     ac8:	df 91       	pop	r29
     aca:	1f 91       	pop	r17
     acc:	0f 91       	pop	r16
     ace:	ff 90       	pop	r15
     ad0:	ef 90       	pop	r14
     ad2:	df 90       	pop	r13
     ad4:	cf 90       	pop	r12
     ad6:	bf 90       	pop	r11
     ad8:	af 90       	pop	r10
     ada:	08 95       	ret

00000adc <extract_json_value>:


int extract_json_value(const char* buffer, const char* key, char* value, size_t value_size, int parse_as_string) {
     adc:	8f 92       	push	r8
     ade:	9f 92       	push	r9
     ae0:	af 92       	push	r10
     ae2:	bf 92       	push	r11
     ae4:	cf 92       	push	r12
     ae6:	df 92       	push	r13
     ae8:	ef 92       	push	r14
     aea:	ff 92       	push	r15
     aec:	0f 93       	push	r16
     aee:	1f 93       	push	r17
     af0:	df 93       	push	r29
     af2:	cf 93       	push	r28
     af4:	0f 92       	push	r0
     af6:	cd b7       	in	r28, 0x3d	; 61
     af8:	de b7       	in	r29, 0x3e	; 62
     afa:	6b 01       	movw	r12, r22
     afc:	7a 01       	movw	r14, r20
     afe:	59 01       	movw	r10, r18
     b00:	48 01       	movw	r8, r16
    const char* json_start = strchr(buffer, '{'); // Найти начало JSON
     b02:	6b e7       	ldi	r22, 0x7B	; 123
     b04:	70 e0       	ldi	r23, 0x00	; 0
     b06:	0e 94 8b 07 	call	0xf16	; 0xf16 <strchr>
    if (!json_start) {
     b0a:	00 97       	sbiw	r24, 0x00	; 0
     b0c:	09 f4       	brne	.+2      	; 0xb10 <extract_json_value+0x34>
     b0e:	4d c0       	rjmp	.+154    	; 0xbaa <extract_json_value+0xce>
        return -1; // JSON не найден
    }

    const char* key_position = strstr(json_start, key); // Найти ключ
     b10:	b6 01       	movw	r22, r12
     b12:	0e 94 a5 07 	call	0xf4a	; 0xf4a <strstr>
    if (!key_position) {
     b16:	00 97       	sbiw	r24, 0x00	; 0
     b18:	09 f4       	brne	.+2      	; 0xb1c <extract_json_value+0x40>
     b1a:	4a c0       	rjmp	.+148    	; 0xbb0 <extract_json_value+0xd4>
        return -2; // Ключ не найден
    }

    // Найти символ ':' после ключа
    const char* colon_position = strchr(key_position, ':');
     b1c:	6a e3       	ldi	r22, 0x3A	; 58
     b1e:	70 e0       	ldi	r23, 0x00	; 0
     b20:	0e 94 8b 07 	call	0xf16	; 0xf16 <strchr>
    if (!colon_position) {
     b24:	00 97       	sbiw	r24, 0x00	; 0
     b26:	09 f4       	brne	.+2      	; 0xb2a <extract_json_value+0x4e>
     b28:	46 c0       	rjmp	.+140    	; 0xbb6 <extract_json_value+0xda>
        return -3; // Ошибка синтаксиса JSON
    }

    // Пропустить пробелы после ':'
    const char* value_start = colon_position + 1;
     b2a:	fc 01       	movw	r30, r24
     b2c:	31 96       	adiw	r30, 0x01	; 1
    while (*value_start == ' ') {
     b2e:	8f 01       	movw	r16, r30
     b30:	81 91       	ld	r24, Z+
     b32:	80 32       	cpi	r24, 0x20	; 32
     b34:	e1 f3       	breq	.-8      	; 0xb2e <extract_json_value+0x52>
        value_start++;
    }

    // Если ключ нужно парсить как строку
    if (parse_as_string) {
     b36:	81 14       	cp	r8, r1
     b38:	91 04       	cpc	r9, r1
     b3a:	11 f4       	brne	.+4      	; 0xb40 <extract_json_value+0x64>
     b3c:	48 01       	movw	r8, r16
     b3e:	12 c0       	rjmp	.+36     	; 0xb64 <extract_json_value+0x88>
        // Если значение в кавычках, то обрабатываем как строку
        if (*value_start == '\"') {
     b40:	82 32       	cpi	r24, 0x22	; 34
     b42:	e1 f7       	brne	.-8      	; 0xb3c <extract_json_value+0x60>
            value_start++; // Пропустить первую кавычку
     b44:	0f 5f       	subi	r16, 0xFF	; 255
     b46:	1f 4f       	sbci	r17, 0xFF	; 255
            const char* value_end = strchr(value_start, '\"'); // Найти закрывающую кавычку
     b48:	c8 01       	movw	r24, r16
     b4a:	62 e2       	ldi	r22, 0x22	; 34
     b4c:	70 e0       	ldi	r23, 0x00	; 0
     b4e:	0e 94 8b 07 	call	0xf16	; 0xf16 <strchr>
            if (!value_end) {
     b52:	00 97       	sbiw	r24, 0x00	; 0
     b54:	99 f1       	breq	.+102    	; 0xbbc <extract_json_value+0xe0>
                return -4; // Ошибка синтаксиса JSON (не закрыта кавычка)
            }

            size_t length = value_end - value_start;
     b56:	6c 01       	movw	r12, r24
     b58:	c0 1a       	sub	r12, r16
     b5a:	d1 0a       	sbc	r13, r17
            if (length >= value_size) {
     b5c:	ca 14       	cp	r12, r10
     b5e:	db 04       	cpc	r13, r11
     b60:	80 f5       	brcc	.+96     	; 0xbc2 <extract_json_value+0xe6>
     b62:	17 c0       	rjmp	.+46     	; 0xb92 <extract_json_value+0xb6>
                return -5; // Значение слишком большое для буфера
            }

            strncpy(value, value_start, length);
            value[length] = '\0'; // Завершить строку
            return 0; // Успех
     b64:	64 01       	movw	r12, r8
        }
    }

    // Если парсим как число
    const char* value_end = value_start;
    while (*value_end && !isspace(*value_end) && *value_end != ',' && *value_end != '}') {
     b66:	f4 01       	movw	r30, r8
     b68:	21 91       	ld	r18, Z+
     b6a:	4f 01       	movw	r8, r30
     b6c:	22 23       	and	r18, r18
     b6e:	61 f0       	breq	.+24     	; 0xb88 <extract_json_value+0xac>
     b70:	82 2f       	mov	r24, r18
     b72:	90 e0       	ldi	r25, 0x00	; 0
     b74:	29 83       	std	Y+1, r18	; 0x01
     b76:	0e 94 7c 07 	call	0xef8	; 0xef8 <isspace>
     b7a:	29 81       	ldd	r18, Y+1	; 0x01
     b7c:	00 97       	sbiw	r24, 0x00	; 0
     b7e:	21 f4       	brne	.+8      	; 0xb88 <extract_json_value+0xac>
     b80:	2c 32       	cpi	r18, 0x2C	; 44
     b82:	11 f0       	breq	.+4      	; 0xb88 <extract_json_value+0xac>
     b84:	2d 37       	cpi	r18, 0x7D	; 125
     b86:	71 f7       	brne	.-36     	; 0xb64 <extract_json_value+0x88>
        value_end++;
    }

    // Если значение найдено
    size_t length = value_end - value_start;
     b88:	c0 1a       	sub	r12, r16
     b8a:	d1 0a       	sbc	r13, r17
    if (length >= value_size) {
     b8c:	ca 14       	cp	r12, r10
     b8e:	db 04       	cpc	r13, r11
     b90:	d8 f4       	brcc	.+54     	; 0xbc8 <extract_json_value+0xec>
        return -6; // Значение слишком большое для буфера
    }

    // Копировать значение в выходной буфер
    strncpy(value, value_start, length);
     b92:	c7 01       	movw	r24, r14
     b94:	b8 01       	movw	r22, r16
     b96:	a6 01       	movw	r20, r12
     b98:	0e 94 96 07 	call	0xf2c	; 0xf2c <strncpy>
    value[length] = '\0'; // Завершить строку
     b9c:	f6 01       	movw	r30, r12
     b9e:	ee 0d       	add	r30, r14
     ba0:	ff 1d       	adc	r31, r15
     ba2:	10 82       	st	Z, r1

    return 0; // Успех
     ba4:	20 e0       	ldi	r18, 0x00	; 0
     ba6:	30 e0       	ldi	r19, 0x00	; 0
     ba8:	11 c0       	rjmp	.+34     	; 0xbcc <extract_json_value+0xf0>


int extract_json_value(const char* buffer, const char* key, char* value, size_t value_size, int parse_as_string) {
    const char* json_start = strchr(buffer, '{'); // Найти начало JSON
    if (!json_start) {
        return -1; // JSON не найден
     baa:	2f ef       	ldi	r18, 0xFF	; 255
     bac:	3f ef       	ldi	r19, 0xFF	; 255
     bae:	0e c0       	rjmp	.+28     	; 0xbcc <extract_json_value+0xf0>
    }

    const char* key_position = strstr(json_start, key); // Найти ключ
    if (!key_position) {
        return -2; // Ключ не найден
     bb0:	2e ef       	ldi	r18, 0xFE	; 254
     bb2:	3f ef       	ldi	r19, 0xFF	; 255
     bb4:	0b c0       	rjmp	.+22     	; 0xbcc <extract_json_value+0xf0>
    }

    // Найти символ ':' после ключа
    const char* colon_position = strchr(key_position, ':');
    if (!colon_position) {
        return -3; // Ошибка синтаксиса JSON
     bb6:	2d ef       	ldi	r18, 0xFD	; 253
     bb8:	3f ef       	ldi	r19, 0xFF	; 255
     bba:	08 c0       	rjmp	.+16     	; 0xbcc <extract_json_value+0xf0>
        // Если значение в кавычках, то обрабатываем как строку
        if (*value_start == '\"') {
            value_start++; // Пропустить первую кавычку
            const char* value_end = strchr(value_start, '\"'); // Найти закрывающую кавычку
            if (!value_end) {
                return -4; // Ошибка синтаксиса JSON (не закрыта кавычка)
     bbc:	2c ef       	ldi	r18, 0xFC	; 252
     bbe:	3f ef       	ldi	r19, 0xFF	; 255
     bc0:	05 c0       	rjmp	.+10     	; 0xbcc <extract_json_value+0xf0>
            }

            size_t length = value_end - value_start;
            if (length >= value_size) {
                return -5; // Значение слишком большое для буфера
     bc2:	2b ef       	ldi	r18, 0xFB	; 251
     bc4:	3f ef       	ldi	r19, 0xFF	; 255
     bc6:	02 c0       	rjmp	.+4      	; 0xbcc <extract_json_value+0xf0>
    }

    // Если значение найдено
    size_t length = value_end - value_start;
    if (length >= value_size) {
        return -6; // Значение слишком большое для буфера
     bc8:	2a ef       	ldi	r18, 0xFA	; 250
     bca:	3f ef       	ldi	r19, 0xFF	; 255
    // Копировать значение в выходной буфер
    strncpy(value, value_start, length);
    value[length] = '\0'; // Завершить строку

    return 0; // Успех
}
     bcc:	c9 01       	movw	r24, r18
     bce:	0f 90       	pop	r0
     bd0:	cf 91       	pop	r28
     bd2:	df 91       	pop	r29
     bd4:	1f 91       	pop	r17
     bd6:	0f 91       	pop	r16
     bd8:	ff 90       	pop	r15
     bda:	ef 90       	pop	r14
     bdc:	df 90       	pop	r13
     bde:	cf 90       	pop	r12
     be0:	bf 90       	pop	r11
     be2:	af 90       	pop	r10
     be4:	9f 90       	pop	r9
     be6:	8f 90       	pop	r8
     be8:	08 95       	ret

00000bea <main>:

int main(void)
{
     bea:	2f 92       	push	r2
     bec:	3f 92       	push	r3
     bee:	4f 92       	push	r4
     bf0:	5f 92       	push	r5
     bf2:	6f 92       	push	r6
     bf4:	7f 92       	push	r7
     bf6:	8f 92       	push	r8
     bf8:	9f 92       	push	r9
     bfa:	af 92       	push	r10
     bfc:	bf 92       	push	r11
     bfe:	cf 92       	push	r12
     c00:	df 92       	push	r13
     c02:	ef 92       	push	r14
     c04:	ff 92       	push	r15
     c06:	0f 93       	push	r16
     c08:	1f 93       	push	r17
     c0a:	df 93       	push	r29
     c0c:	cf 93       	push	r28
     c0e:	cd b7       	in	r28, 0x3d	; 61
     c10:	de b7       	in	r29, 0x3e	; 62
     c12:	c6 5f       	subi	r28, 0xF6	; 246
     c14:	d0 40       	sbci	r29, 0x00	; 0
     c16:	0f b6       	in	r0, 0x3f	; 63
     c18:	f8 94       	cli
     c1a:	de bf       	out	0x3e, r29	; 62
     c1c:	0f be       	out	0x3f, r0	; 63
     c1e:	cd bf       	out	0x3d, r28	; 61
	sei();
     c20:	78 94       	sei

	DDRA &= ~((1 << PA0) | (1 << PA2));
     c22:	8a b3       	in	r24, 0x1a	; 26
     c24:	8a 7f       	andi	r24, 0xFA	; 250
     c26:	8a bb       	out	0x1a, r24	; 26
	PORTA |= (1 << PA0) | (1 << PA2);
     c28:	8b b3       	in	r24, 0x1b	; 27
     c2a:	85 60       	ori	r24, 0x05	; 5
     c2c:	8b bb       	out	0x1b, r24	; 27
}

//инициализация I2C как передатчика
void I2C_Init (void)
{
TWBR=0xFF;//скорость передачи
     c2e:	8f ef       	ldi	r24, 0xFF	; 255
     c30:	80 b9       	out	0x00, r24	; 0

	I2C_Init();//????????????? ??????
	uart_init();
     c32:	0e 94 b9 04 	call	0x972	; 0x972 <uart_init>
	lcd_init();//????????????? LCD
     c36:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_init>
	lcd_clear();//??????? LCD ? ??????? ??????? ? 0.0
     c3a:	0e 94 36 01 	call	0x26c	; 0x26c <lcd_clear>
	MFRC522_Init();
     c3e:	0e 94 89 04 	call	0x912	; 0x912 <MFRC522_Init>

	char operation_symbol = 'e';
     c42:	85 e6       	ldi	r24, 0x65	; 101
     c44:	89 83       	std	Y+1, r24	; 0x01
	char buffer[5];
	char uart_buffer[64];
	uchar card_num[5];
	uint8_t i;
	
	lcd_putstring("Initialization..");
     c46:	80 e6       	ldi	r24, 0x60	; 96
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	0e 94 4c 01 	call	0x298	; 0x298 <lcd_putstring>
     c4e:	8f ef       	ldi	r24, 0xFF	; 255
     c50:	91 e1       	ldi	r25, 0x11	; 17
     c52:	aa e7       	ldi	r26, 0x7A	; 122
     c54:	81 50       	subi	r24, 0x01	; 1
     c56:	90 40       	sbci	r25, 0x00	; 0
     c58:	a0 40       	sbci	r26, 0x00	; 0
     c5a:	e1 f7       	brne	.-8      	; 0xc54 <main+0x6a>
     c5c:	00 c0       	rjmp	.+0      	; 0xc5e <main+0x74>
     c5e:	00 00       	nop
	_delay_ms(5000);
	lcd_clear();
     c60:	0e 94 36 01 	call	0x26c	; 0x26c <lcd_clear>
	lcd_gotoxy(0, 0);
     c64:	80 e0       	ldi	r24, 0x00	; 0
     c66:	60 e0       	ldi	r22, 0x00	; 0
     c68:	0e 94 41 01 	call	0x282	; 0x282 <lcd_gotoxy>
	
	while (1)
	{
		if (MFRC522_Request(PICC_REQIDL, card_num) == MI_OK && MFRC522_Anticoll(card_num) == MI_OK) {
     c6c:	87 e0       	ldi	r24, 0x07	; 7
     c6e:	68 2e       	mov	r6, r24
     c70:	71 2c       	mov	r7, r1
     c72:	6c 0e       	add	r6, r28
     c74:	7d 1e       	adc	r7, r29
	        // ????????? ?????? ID ?????
	        char card_id_string[10];  // 8 ???????? ??? ID + 1 ??? ????????????? ???????
	        for (i = 0; i < 4; i++) {
	            sprintf(&card_id_string[i * 2], "%02X", card_num[i]);  // ??????????? ???? ? ??????
     c76:	0c e1       	ldi	r16, 0x1C	; 28
     c78:	80 2e       	mov	r8, r16
     c7a:	91 2c       	mov	r9, r1
     c7c:	8c 0e       	add	r8, r28
     c7e:	9d 1e       	adc	r9, r29
					uart_send_string(refill_payload);
	            
		        }
			}

	        uart_receive_string(uart_buffer, sizeof(uart_buffer));
     c80:	17 eb       	ldi	r17, 0xB7	; 183
     c82:	41 2e       	mov	r4, r17
     c84:	51 2c       	mov	r5, r1
     c86:	4c 0e       	add	r4, r28
     c88:	5d 1e       	adc	r5, r29

			char id_key[] = "card_id";
     c8a:	bc e0       	ldi	r27, 0x0C	; 12
     c8c:	2b 2e       	mov	r2, r27
     c8e:	31 2c       	mov	r3, r1
     c90:	2c 0e       	add	r2, r28
     c92:	3d 1e       	adc	r3, r29
     c94:	a6 e3       	ldi	r26, 0x36	; 54
     c96:	aa 2e       	mov	r10, r26
     c98:	b1 2c       	mov	r11, r1
     c9a:	ac 0e       	add	r10, r28
     c9c:	bd 1e       	adc	r11, r29
	lcd_clear();
	lcd_gotoxy(0, 0);
	
	while (1)
	{
		if (MFRC522_Request(PICC_REQIDL, card_num) == MI_OK && MFRC522_Anticoll(card_num) == MI_OK) {
     c9e:	86 e2       	ldi	r24, 0x26	; 38
     ca0:	b3 01       	movw	r22, r6
     ca2:	0e 94 53 04 	call	0x8a6	; 0x8a6 <MFRC522_Request>
     ca6:	88 23       	and	r24, r24
     ca8:	09 f0       	breq	.+2      	; 0xcac <main+0xc2>
     caa:	1d c1       	rjmp	.+570    	; 0xee6 <main+0x2fc>
     cac:	c3 01       	movw	r24, r6
     cae:	0e 94 20 04 	call	0x840	; 0x840 <MFRC522_Anticoll>
     cb2:	88 23       	and	r24, r24
     cb4:	09 f0       	breq	.+2      	; 0xcb8 <main+0xce>
     cb6:	17 c1       	rjmp	.+558    	; 0xee6 <main+0x2fc>
     cb8:	73 01       	movw	r14, r6
     cba:	00 e0       	ldi	r16, 0x00	; 0
     cbc:	10 e0       	ldi	r17, 0x00	; 0
	        // ????????? ?????? ID ?????
	        char card_id_string[10];  // 8 ???????? ??? ID + 1 ??? ????????????? ???????
	        for (i = 0; i < 4; i++) {
	            sprintf(&card_id_string[i * 2], "%02X", card_num[i]);  // ??????????? ???? ? ??????
     cbe:	d7 01       	movw	r26, r14
     cc0:	2d 91       	ld	r18, X+
     cc2:	7d 01       	movw	r14, r26
     cc4:	00 d0       	rcall	.+0      	; 0xcc6 <main+0xdc>
     cc6:	00 d0       	rcall	.+0      	; 0xcc8 <main+0xde>
     cc8:	00 d0       	rcall	.+0      	; 0xcca <main+0xe0>
     cca:	ed b7       	in	r30, 0x3d	; 61
     ccc:	fe b7       	in	r31, 0x3e	; 62
     cce:	31 96       	adiw	r30, 0x01	; 1
     cd0:	c4 01       	movw	r24, r8
     cd2:	80 0f       	add	r24, r16
     cd4:	91 1f       	adc	r25, r17
     cd6:	ad b7       	in	r26, 0x3d	; 61
     cd8:	be b7       	in	r27, 0x3e	; 62
     cda:	12 96       	adiw	r26, 0x02	; 2
     cdc:	9c 93       	st	X, r25
     cde:	8e 93       	st	-X, r24
     ce0:	11 97       	sbiw	r26, 0x01	; 1
     ce2:	81 e7       	ldi	r24, 0x71	; 113
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	93 83       	std	Z+3, r25	; 0x03
     ce8:	82 83       	std	Z+2, r24	; 0x02
     cea:	24 83       	std	Z+4, r18	; 0x04
     cec:	15 82       	std	Z+5, r1	; 0x05
     cee:	0e 94 bf 07 	call	0xf7e	; 0xf7e <sprintf>
     cf2:	0e 5f       	subi	r16, 0xFE	; 254
     cf4:	1f 4f       	sbci	r17, 0xFF	; 255
	while (1)
	{
		if (MFRC522_Request(PICC_REQIDL, card_num) == MI_OK && MFRC522_Anticoll(card_num) == MI_OK) {
	        // ????????? ?????? ID ?????
	        char card_id_string[10];  // 8 ???????? ??? ID + 1 ??? ????????????? ???????
	        for (i = 0; i < 4; i++) {
     cf6:	ad b7       	in	r26, 0x3d	; 61
     cf8:	be b7       	in	r27, 0x3e	; 62
     cfa:	16 96       	adiw	r26, 0x06	; 6
     cfc:	0f b6       	in	r0, 0x3f	; 63
     cfe:	f8 94       	cli
     d00:	be bf       	out	0x3e, r27	; 62
     d02:	0f be       	out	0x3f, r0	; 63
     d04:	ad bf       	out	0x3d, r26	; 61
     d06:	08 30       	cpi	r16, 0x08	; 8
     d08:	11 05       	cpc	r17, r1
     d0a:	c9 f6       	brne	.-78     	; 0xcbe <main+0xd4>
	            sprintf(&card_id_string[i * 2], "%02X", card_num[i]);  // ??????????? ???? ? ??????
	        }
			card_id_string[8] = '\n';
     d0c:	ba e0       	ldi	r27, 0x0A	; 10
     d0e:	bc a3       	std	Y+36, r27	; 0x24
	        card_id_string[9] = '\0';  // ????????? ??????
     d10:	1d a2       	std	Y+37, r1	; 0x25
			
			if (PINA & (1 << PA2)) {
     d12:	ca 9b       	sbis	0x19, 2	; 25
     d14:	11 c0       	rjmp	.+34     	; 0xd38 <main+0x14e>
				// Если на PA2 есть напряжения (логическая 1)
				// Получение инфы
				operation_symbol = 'i';
     d16:	89 e6       	ldi	r24, 0x69	; 105
     d18:	89 83       	std	Y+1, r24	; 0x01

				char info_payload[14];
				sprintf(info_payload, "GET#%s", card_id_string);
     d1a:	00 d0       	rcall	.+0      	; 0xd1c <main+0x132>
     d1c:	00 d0       	rcall	.+0      	; 0xd1e <main+0x134>
     d1e:	00 d0       	rcall	.+0      	; 0xd20 <main+0x136>
     d20:	ed b7       	in	r30, 0x3d	; 61
     d22:	fe b7       	in	r31, 0x3e	; 62
     d24:	31 96       	adiw	r30, 0x01	; 1
     d26:	ad b7       	in	r26, 0x3d	; 61
     d28:	be b7       	in	r27, 0x3e	; 62
     d2a:	12 96       	adiw	r26, 0x02	; 2
     d2c:	bc 92       	st	X, r11
     d2e:	ae 92       	st	-X, r10
     d30:	11 97       	sbiw	r26, 0x01	; 1
     d32:	86 e7       	ldi	r24, 0x76	; 118
     d34:	90 e0       	ldi	r25, 0x00	; 0
     d36:	23 c0       	rjmp	.+70     	; 0xd7e <main+0x194>
	            uart_send_string(info_payload);
			} else {
				if (PINA & (1 << PA0)) {
     d38:	c8 9b       	sbis	0x19, 0	; 25
     d3a:	11 c0       	rjmp	.+34     	; 0xd5e <main+0x174>
					// Если на PA0 есть напряжения (логическая 1)
					// Оплата проезда
					operation_symbol = '-';
     d3c:	8d e2       	ldi	r24, 0x2D	; 45
     d3e:	89 83       	std	Y+1, r24	; 0x01

					char refill_payload[17];
					sprintf(refill_payload, "POST#0#%s", card_id_string);
     d40:	00 d0       	rcall	.+0      	; 0xd42 <main+0x158>
     d42:	00 d0       	rcall	.+0      	; 0xd44 <main+0x15a>
     d44:	00 d0       	rcall	.+0      	; 0xd46 <main+0x15c>
     d46:	ed b7       	in	r30, 0x3d	; 61
     d48:	fe b7       	in	r31, 0x3e	; 62
     d4a:	31 96       	adiw	r30, 0x01	; 1
     d4c:	ad b7       	in	r26, 0x3d	; 61
     d4e:	be b7       	in	r27, 0x3e	; 62
     d50:	12 96       	adiw	r26, 0x02	; 2
     d52:	bc 92       	st	X, r11
     d54:	ae 92       	st	-X, r10
     d56:	11 97       	sbiw	r26, 0x01	; 1
     d58:	8d e7       	ldi	r24, 0x7D	; 125
     d5a:	90 e0       	ldi	r25, 0x00	; 0
     d5c:	10 c0       	rjmp	.+32     	; 0xd7e <main+0x194>
					uart_send_string(refill_payload);
		        } else {
		            // Если на PA0 нет напряжения (логическая 0)
					// Пополнение баланса
					operation_symbol = '+';
     d5e:	8b e2       	ldi	r24, 0x2B	; 43
     d60:	89 83       	std	Y+1, r24	; 0x01

					char refill_payload[17];
					sprintf(refill_payload, "POST#1#%s", card_id_string);
     d62:	00 d0       	rcall	.+0      	; 0xd64 <main+0x17a>
     d64:	00 d0       	rcall	.+0      	; 0xd66 <main+0x17c>
     d66:	00 d0       	rcall	.+0      	; 0xd68 <main+0x17e>
     d68:	ed b7       	in	r30, 0x3d	; 61
     d6a:	fe b7       	in	r31, 0x3e	; 62
     d6c:	31 96       	adiw	r30, 0x01	; 1
     d6e:	ad b7       	in	r26, 0x3d	; 61
     d70:	be b7       	in	r27, 0x3e	; 62
     d72:	12 96       	adiw	r26, 0x02	; 2
     d74:	bc 92       	st	X, r11
     d76:	ae 92       	st	-X, r10
     d78:	11 97       	sbiw	r26, 0x01	; 1
     d7a:	87 e8       	ldi	r24, 0x87	; 135
     d7c:	90 e0       	ldi	r25, 0x00	; 0
     d7e:	93 83       	std	Z+3, r25	; 0x03
     d80:	82 83       	std	Z+2, r24	; 0x02
     d82:	95 82       	std	Z+5, r9	; 0x05
     d84:	84 82       	std	Z+4, r8	; 0x04
     d86:	0e 94 bf 07 	call	0xf7e	; 0xf7e <sprintf>
					uart_send_string(refill_payload);
     d8a:	ad b7       	in	r26, 0x3d	; 61
     d8c:	be b7       	in	r27, 0x3e	; 62
     d8e:	16 96       	adiw	r26, 0x06	; 6
     d90:	0f b6       	in	r0, 0x3f	; 63
     d92:	f8 94       	cli
     d94:	be bf       	out	0x3e, r27	; 62
     d96:	0f be       	out	0x3f, r0	; 63
     d98:	ad bf       	out	0x3d, r26	; 61
     d9a:	c5 01       	movw	r24, r10
     d9c:	0e 94 c5 04 	call	0x98a	; 0x98a <uart_send_string>
	            
		        }
			}

	        uart_receive_string(uart_buffer, sizeof(uart_buffer));
     da0:	c2 01       	movw	r24, r4
     da2:	60 e4       	ldi	r22, 0x40	; 64
     da4:	70 e0       	ldi	r23, 0x00	; 0
     da6:	0e 94 dd 04 	call	0x9ba	; 0x9ba <uart_receive_string>

			char id_key[] = "card_id";
     daa:	d1 01       	movw	r26, r2
     dac:	e3 eb       	ldi	r30, 0xB3	; 179
     dae:	f0 e0       	ldi	r31, 0x00	; 0
     db0:	88 e0       	ldi	r24, 0x08	; 8
     db2:	01 90       	ld	r0, Z+
     db4:	0d 92       	st	X+, r0
     db6:	81 50       	subi	r24, 0x01	; 1
     db8:	e1 f7       	brne	.-8      	; 0xdb2 <main+0x1c8>
			char balance_key[] = "balance";
     dba:	de 01       	movw	r26, r28
     dbc:	54 96       	adiw	r26, 0x14	; 20
     dbe:	eb eb       	ldi	r30, 0xBB	; 187
     dc0:	f0 e0       	ldi	r31, 0x00	; 0
     dc2:	88 e0       	ldi	r24, 0x08	; 8
     dc4:	01 90       	ld	r0, Z+
     dc6:	0d 92       	st	X+, r0
     dc8:	81 50       	subi	r24, 0x01	; 1
     dca:	e1 f7       	brne	.-8      	; 0xdc4 <main+0x1da>
			char id_value[16];
			char balance_value[32];
			extract_json_value(uart_buffer, id_key, id_value, sizeof(id_value), 1);
     dcc:	c2 01       	movw	r24, r4
     dce:	b1 01       	movw	r22, r2
     dd0:	ae 01       	movw	r20, r28
     dd2:	4a 5d       	subi	r20, 0xDA	; 218
     dd4:	5f 4f       	sbci	r21, 0xFF	; 255
     dd6:	20 e1       	ldi	r18, 0x10	; 16
     dd8:	30 e0       	ldi	r19, 0x00	; 0
     dda:	01 e0       	ldi	r16, 0x01	; 1
     ddc:	10 e0       	ldi	r17, 0x00	; 0
     dde:	0e 94 6e 05 	call	0xadc	; 0xadc <extract_json_value>
			extract_json_value(uart_buffer, balance_key, balance_value, sizeof(balance_value), 0);
     de2:	c2 01       	movw	r24, r4
     de4:	be 01       	movw	r22, r28
     de6:	6c 5e       	subi	r22, 0xEC	; 236
     de8:	7f 4f       	sbci	r23, 0xFF	; 255
     dea:	ae 01       	movw	r20, r28
     dec:	49 5b       	subi	r20, 0xB9	; 185
     dee:	5f 4f       	sbci	r21, 0xFF	; 255
     df0:	20 e2       	ldi	r18, 0x20	; 32
     df2:	30 e0       	ldi	r19, 0x00	; 0
     df4:	00 e0       	ldi	r16, 0x00	; 0
     df6:	10 e0       	ldi	r17, 0x00	; 0
     df8:	0e 94 6e 05 	call	0xadc	; 0xadc <extract_json_value>

			char id_output[32];
			char balance_output[48];
			sprintf(id_output, "ID: %s", id_value);
     dfc:	00 d0       	rcall	.+0      	; 0xdfe <main+0x214>
     dfe:	00 d0       	rcall	.+0      	; 0xe00 <main+0x216>
     e00:	00 d0       	rcall	.+0      	; 0xe02 <main+0x218>
     e02:	ed b7       	in	r30, 0x3d	; 61
     e04:	fe b7       	in	r31, 0x3e	; 62
     e06:	31 96       	adiw	r30, 0x01	; 1
     e08:	87 e6       	ldi	r24, 0x67	; 103
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	8c 0f       	add	r24, r28
     e0e:	9d 1f       	adc	r25, r29
     e10:	ad b7       	in	r26, 0x3d	; 61
     e12:	be b7       	in	r27, 0x3e	; 62
     e14:	12 96       	adiw	r26, 0x02	; 2
     e16:	9c 93       	st	X, r25
     e18:	8e 93       	st	-X, r24
     e1a:	11 97       	sbiw	r26, 0x01	; 1
     e1c:	a1 e9       	ldi	r26, 0x91	; 145
     e1e:	b0 e0       	ldi	r27, 0x00	; 0
     e20:	b3 83       	std	Z+3, r27	; 0x03
     e22:	a2 83       	std	Z+2, r26	; 0x02
     e24:	86 e2       	ldi	r24, 0x26	; 38
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	8c 0f       	add	r24, r28
     e2a:	9d 1f       	adc	r25, r29
     e2c:	95 83       	std	Z+5, r25	; 0x05
     e2e:	84 83       	std	Z+4, r24	; 0x04
     e30:	0e 94 bf 07 	call	0xf7e	; 0xf7e <sprintf>
			sprintf(balance_output, "Balance: %s", balance_value);
     e34:	ed b7       	in	r30, 0x3d	; 61
     e36:	fe b7       	in	r31, 0x3e	; 62
     e38:	31 96       	adiw	r30, 0x01	; 1
     e3a:	87 e8       	ldi	r24, 0x87	; 135
     e3c:	90 e0       	ldi	r25, 0x00	; 0
     e3e:	8c 0f       	add	r24, r28
     e40:	9d 1f       	adc	r25, r29
     e42:	ad b7       	in	r26, 0x3d	; 61
     e44:	be b7       	in	r27, 0x3e	; 62
     e46:	12 96       	adiw	r26, 0x02	; 2
     e48:	9c 93       	st	X, r25
     e4a:	8e 93       	st	-X, r24
     e4c:	11 97       	sbiw	r26, 0x01	; 1
     e4e:	a8 e9       	ldi	r26, 0x98	; 152
     e50:	b0 e0       	ldi	r27, 0x00	; 0
     e52:	b3 83       	std	Z+3, r27	; 0x03
     e54:	a2 83       	std	Z+2, r26	; 0x02
     e56:	87 e4       	ldi	r24, 0x47	; 71
     e58:	90 e0       	ldi	r25, 0x00	; 0
     e5a:	8c 0f       	add	r24, r28
     e5c:	9d 1f       	adc	r25, r29
     e5e:	95 83       	std	Z+5, r25	; 0x05
     e60:	84 83       	std	Z+4, r24	; 0x04
     e62:	0e 94 bf 07 	call	0xf7e	; 0xf7e <sprintf>

	        lcd_clear();
     e66:	ad b7       	in	r26, 0x3d	; 61
     e68:	be b7       	in	r27, 0x3e	; 62
     e6a:	16 96       	adiw	r26, 0x06	; 6
     e6c:	0f b6       	in	r0, 0x3f	; 63
     e6e:	f8 94       	cli
     e70:	be bf       	out	0x3e, r27	; 62
     e72:	0f be       	out	0x3f, r0	; 63
     e74:	ad bf       	out	0x3d, r26	; 61
     e76:	0e 94 36 01 	call	0x26c	; 0x26c <lcd_clear>

			lcd_gotoxy(0, 0);
     e7a:	80 e0       	ldi	r24, 0x00	; 0
     e7c:	60 e0       	ldi	r22, 0x00	; 0
     e7e:	0e 94 41 01 	call	0x282	; 0x282 <lcd_gotoxy>
			lcd_putstring(id_output);
     e82:	ce 01       	movw	r24, r28
     e84:	89 59       	subi	r24, 0x99	; 153
     e86:	9f 4f       	sbci	r25, 0xFF	; 255
     e88:	0e 94 4c 01 	call	0x298	; 0x298 <lcd_putstring>

			lcd_gotoxy(15, 0);
     e8c:	8f e0       	ldi	r24, 0x0F	; 15
     e8e:	60 e0       	ldi	r22, 0x00	; 0
     e90:	0e 94 41 01 	call	0x282	; 0x282 <lcd_gotoxy>
			lcd_putchar(operation_symbol);
     e94:	89 81       	ldd	r24, Y+1	; 0x01
     e96:	0e 94 cc 00 	call	0x198	; 0x198 <lcd_putchar>

			lcd_gotoxy(0, 1);
     e9a:	80 e0       	ldi	r24, 0x00	; 0
     e9c:	61 e0       	ldi	r22, 0x01	; 1
     e9e:	0e 94 41 01 	call	0x282	; 0x282 <lcd_gotoxy>
			lcd_putstring(balance_output);
     ea2:	ce 01       	movw	r24, r28
     ea4:	89 57       	subi	r24, 0x79	; 121
     ea6:	9f 4f       	sbci	r25, 0xFF	; 255
     ea8:	0e 94 4c 01 	call	0x298	; 0x298 <lcd_putstring>
     eac:	8f ef       	ldi	r24, 0xFF	; 255
     eae:	9d e3       	ldi	r25, 0x3D	; 61
     eb0:	a9 e4       	ldi	r26, 0x49	; 73
     eb2:	81 50       	subi	r24, 0x01	; 1
     eb4:	90 40       	sbci	r25, 0x00	; 0
     eb6:	a0 40       	sbci	r26, 0x00	; 0
     eb8:	e1 f7       	brne	.-8      	; 0xeb2 <main+0x2c8>
     eba:	00 c0       	rjmp	.+0      	; 0xebc <main+0x2d2>
     ebc:	00 00       	nop

	        _delay_ms(3000);
			clear_temp_data(&operation_symbol, buffer, uart_buffer, card_num, sizeof(buffer), sizeof(uart_buffer), sizeof(card_num));
     ebe:	ce 01       	movw	r24, r28
     ec0:	01 96       	adiw	r24, 0x01	; 1
     ec2:	be 01       	movw	r22, r28
     ec4:	6e 5f       	subi	r22, 0xFE	; 254
     ec6:	7f 4f       	sbci	r23, 0xFF	; 255
     ec8:	a2 01       	movw	r20, r4
     eca:	93 01       	movw	r18, r6
     ecc:	05 e0       	ldi	r16, 0x05	; 5
     ece:	10 e0       	ldi	r17, 0x00	; 0
     ed0:	f0 e4       	ldi	r31, 0x40	; 64
     ed2:	ef 2e       	mov	r14, r31
     ed4:	f1 2c       	mov	r15, r1
     ed6:	e5 e0       	ldi	r30, 0x05	; 5
     ed8:	ce 2e       	mov	r12, r30
     eda:	d1 2c       	mov	r13, r1
     edc:	0e 94 37 05 	call	0xa6e	; 0xa6e <clear_temp_data>
			lcd_clear();
     ee0:	0e 94 36 01 	call	0x26c	; 0x26c <lcd_clear>
	lcd_clear();
	lcd_gotoxy(0, 0);
	
	while (1)
	{
		if (MFRC522_Request(PICC_REQIDL, card_num) == MI_OK && MFRC522_Anticoll(card_num) == MI_OK) {
     ee4:	dc ce       	rjmp	.-584    	; 0xc9e <main+0xb4>

	        _delay_ms(3000);
			clear_temp_data(&operation_symbol, buffer, uart_buffer, card_num, sizeof(buffer), sizeof(uart_buffer), sizeof(card_num));
			lcd_clear();
		} else {
			lcd_gotoxy(0, 0);
     ee6:	80 e0       	ldi	r24, 0x00	; 0
     ee8:	60 e0       	ldi	r22, 0x00	; 0
     eea:	0e 94 41 01 	call	0x282	; 0x282 <lcd_gotoxy>
			lcd_putstring("Ready for card");
     eee:	84 ea       	ldi	r24, 0xA4	; 164
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	0e 94 4c 01 	call	0x298	; 0x298 <lcd_putstring>
     ef6:	d3 ce       	rjmp	.-602    	; 0xc9e <main+0xb4>

00000ef8 <isspace>:
     ef8:	91 11       	cpse	r25, r1
     efa:	4b c2       	rjmp	.+1174   	; 0x1392 <__ctype_isfalse>
     efc:	80 32       	cpi	r24, 0x20	; 32
     efe:	19 f0       	breq	.+6      	; 0xf06 <isspace+0xe>
     f00:	89 50       	subi	r24, 0x09	; 9
     f02:	85 50       	subi	r24, 0x05	; 5
     f04:	d0 f7       	brcc	.-12     	; 0xefa <isspace+0x2>
     f06:	08 95       	ret

00000f08 <memset>:
     f08:	dc 01       	movw	r26, r24
     f0a:	01 c0       	rjmp	.+2      	; 0xf0e <memset+0x6>
     f0c:	6d 93       	st	X+, r22
     f0e:	41 50       	subi	r20, 0x01	; 1
     f10:	50 40       	sbci	r21, 0x00	; 0
     f12:	e0 f7       	brcc	.-8      	; 0xf0c <memset+0x4>
     f14:	08 95       	ret

00000f16 <strchr>:
     f16:	fc 01       	movw	r30, r24
     f18:	81 91       	ld	r24, Z+
     f1a:	86 17       	cp	r24, r22
     f1c:	21 f0       	breq	.+8      	; 0xf26 <strchr+0x10>
     f1e:	88 23       	and	r24, r24
     f20:	d9 f7       	brne	.-10     	; 0xf18 <strchr+0x2>
     f22:	99 27       	eor	r25, r25
     f24:	08 95       	ret
     f26:	31 97       	sbiw	r30, 0x01	; 1
     f28:	cf 01       	movw	r24, r30
     f2a:	08 95       	ret

00000f2c <strncpy>:
     f2c:	fb 01       	movw	r30, r22
     f2e:	dc 01       	movw	r26, r24
     f30:	41 50       	subi	r20, 0x01	; 1
     f32:	50 40       	sbci	r21, 0x00	; 0
     f34:	48 f0       	brcs	.+18     	; 0xf48 <strncpy+0x1c>
     f36:	01 90       	ld	r0, Z+
     f38:	0d 92       	st	X+, r0
     f3a:	00 20       	and	r0, r0
     f3c:	c9 f7       	brne	.-14     	; 0xf30 <strncpy+0x4>
     f3e:	01 c0       	rjmp	.+2      	; 0xf42 <strncpy+0x16>
     f40:	1d 92       	st	X+, r1
     f42:	41 50       	subi	r20, 0x01	; 1
     f44:	50 40       	sbci	r21, 0x00	; 0
     f46:	e0 f7       	brcc	.-8      	; 0xf40 <strncpy+0x14>
     f48:	08 95       	ret

00000f4a <strstr>:
     f4a:	fb 01       	movw	r30, r22
     f4c:	51 91       	ld	r21, Z+
     f4e:	55 23       	and	r21, r21
     f50:	a9 f0       	breq	.+42     	; 0xf7c <strstr+0x32>
     f52:	bf 01       	movw	r22, r30
     f54:	dc 01       	movw	r26, r24
     f56:	4d 91       	ld	r20, X+
     f58:	45 17       	cp	r20, r21
     f5a:	41 11       	cpse	r20, r1
     f5c:	e1 f7       	brne	.-8      	; 0xf56 <strstr+0xc>
     f5e:	59 f4       	brne	.+22     	; 0xf76 <strstr+0x2c>
     f60:	cd 01       	movw	r24, r26
     f62:	01 90       	ld	r0, Z+
     f64:	00 20       	and	r0, r0
     f66:	49 f0       	breq	.+18     	; 0xf7a <strstr+0x30>
     f68:	4d 91       	ld	r20, X+
     f6a:	40 15       	cp	r20, r0
     f6c:	41 11       	cpse	r20, r1
     f6e:	c9 f3       	breq	.-14     	; 0xf62 <strstr+0x18>
     f70:	fb 01       	movw	r30, r22
     f72:	41 11       	cpse	r20, r1
     f74:	ef cf       	rjmp	.-34     	; 0xf54 <strstr+0xa>
     f76:	81 e0       	ldi	r24, 0x01	; 1
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	01 97       	sbiw	r24, 0x01	; 1
     f7c:	08 95       	ret

00000f7e <sprintf>:
     f7e:	ae e0       	ldi	r26, 0x0E	; 14
     f80:	b0 e0       	ldi	r27, 0x00	; 0
     f82:	e5 ec       	ldi	r30, 0xC5	; 197
     f84:	f7 e0       	ldi	r31, 0x07	; 7
     f86:	0c 94 7a 0a 	jmp	0x14f4	; 0x14f4 <__prologue_saves__+0x1c>
     f8a:	0d 89       	ldd	r16, Y+21	; 0x15
     f8c:	1e 89       	ldd	r17, Y+22	; 0x16
     f8e:	86 e0       	ldi	r24, 0x06	; 6
     f90:	8c 83       	std	Y+4, r24	; 0x04
     f92:	1a 83       	std	Y+2, r17	; 0x02
     f94:	09 83       	std	Y+1, r16	; 0x01
     f96:	8f ef       	ldi	r24, 0xFF	; 255
     f98:	9f e7       	ldi	r25, 0x7F	; 127
     f9a:	9e 83       	std	Y+6, r25	; 0x06
     f9c:	8d 83       	std	Y+5, r24	; 0x05
     f9e:	9e 01       	movw	r18, r28
     fa0:	27 5e       	subi	r18, 0xE7	; 231
     fa2:	3f 4f       	sbci	r19, 0xFF	; 255
     fa4:	ce 01       	movw	r24, r28
     fa6:	01 96       	adiw	r24, 0x01	; 1
     fa8:	6f 89       	ldd	r22, Y+23	; 0x17
     faa:	78 8d       	ldd	r23, Y+24	; 0x18
     fac:	a9 01       	movw	r20, r18
     fae:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <vfprintf>
     fb2:	ef 81       	ldd	r30, Y+7	; 0x07
     fb4:	f8 85       	ldd	r31, Y+8	; 0x08
     fb6:	e0 0f       	add	r30, r16
     fb8:	f1 1f       	adc	r31, r17
     fba:	10 82       	st	Z, r1
     fbc:	2e 96       	adiw	r28, 0x0e	; 14
     fbe:	e4 e0       	ldi	r30, 0x04	; 4
     fc0:	0c 94 96 0a 	jmp	0x152c	; 0x152c <__epilogue_restores__+0x1c>

00000fc4 <vfprintf>:
     fc4:	ac e0       	ldi	r26, 0x0C	; 12
     fc6:	b0 e0       	ldi	r27, 0x00	; 0
     fc8:	e8 ee       	ldi	r30, 0xE8	; 232
     fca:	f7 e0       	ldi	r31, 0x07	; 7
     fcc:	0c 94 6c 0a 	jmp	0x14d8	; 0x14d8 <__prologue_saves__>
     fd0:	6c 01       	movw	r12, r24
     fd2:	1b 01       	movw	r2, r22
     fd4:	8a 01       	movw	r16, r20
     fd6:	fc 01       	movw	r30, r24
     fd8:	17 82       	std	Z+7, r1	; 0x07
     fda:	16 82       	std	Z+6, r1	; 0x06
     fdc:	83 81       	ldd	r24, Z+3	; 0x03
     fde:	81 ff       	sbrs	r24, 1
     fe0:	d1 c1       	rjmp	.+930    	; 0x1384 <vfprintf+0x3c0>
     fe2:	2e 01       	movw	r4, r28
     fe4:	08 94       	sec
     fe6:	41 1c       	adc	r4, r1
     fe8:	51 1c       	adc	r5, r1
     fea:	f6 01       	movw	r30, r12
     fec:	93 81       	ldd	r25, Z+3	; 0x03
     fee:	f1 01       	movw	r30, r2
     ff0:	93 fd       	sbrc	r25, 3
     ff2:	85 91       	lpm	r24, Z+
     ff4:	93 ff       	sbrs	r25, 3
     ff6:	81 91       	ld	r24, Z+
     ff8:	1f 01       	movw	r2, r30
     ffa:	88 23       	and	r24, r24
     ffc:	09 f4       	brne	.+2      	; 0x1000 <vfprintf+0x3c>
     ffe:	be c1       	rjmp	.+892    	; 0x137c <vfprintf+0x3b8>
    1000:	85 32       	cpi	r24, 0x25	; 37
    1002:	39 f4       	brne	.+14     	; 0x1012 <vfprintf+0x4e>
    1004:	93 fd       	sbrc	r25, 3
    1006:	85 91       	lpm	r24, Z+
    1008:	93 ff       	sbrs	r25, 3
    100a:	81 91       	ld	r24, Z+
    100c:	1f 01       	movw	r2, r30
    100e:	85 32       	cpi	r24, 0x25	; 37
    1010:	29 f4       	brne	.+10     	; 0x101c <vfprintf+0x58>
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	b6 01       	movw	r22, r12
    1016:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <fputc>
    101a:	e7 cf       	rjmp	.-50     	; 0xfea <vfprintf+0x26>
    101c:	ee 24       	eor	r14, r14
    101e:	ff 24       	eor	r15, r15
    1020:	20 e0       	ldi	r18, 0x00	; 0
    1022:	20 32       	cpi	r18, 0x20	; 32
    1024:	b0 f4       	brcc	.+44     	; 0x1052 <vfprintf+0x8e>
    1026:	8b 32       	cpi	r24, 0x2B	; 43
    1028:	69 f0       	breq	.+26     	; 0x1044 <vfprintf+0x80>
    102a:	8c 32       	cpi	r24, 0x2C	; 44
    102c:	28 f4       	brcc	.+10     	; 0x1038 <vfprintf+0x74>
    102e:	80 32       	cpi	r24, 0x20	; 32
    1030:	51 f0       	breq	.+20     	; 0x1046 <vfprintf+0x82>
    1032:	83 32       	cpi	r24, 0x23	; 35
    1034:	71 f4       	brne	.+28     	; 0x1052 <vfprintf+0x8e>
    1036:	0b c0       	rjmp	.+22     	; 0x104e <vfprintf+0x8a>
    1038:	8d 32       	cpi	r24, 0x2D	; 45
    103a:	39 f0       	breq	.+14     	; 0x104a <vfprintf+0x86>
    103c:	80 33       	cpi	r24, 0x30	; 48
    103e:	49 f4       	brne	.+18     	; 0x1052 <vfprintf+0x8e>
    1040:	21 60       	ori	r18, 0x01	; 1
    1042:	2c c0       	rjmp	.+88     	; 0x109c <vfprintf+0xd8>
    1044:	22 60       	ori	r18, 0x02	; 2
    1046:	24 60       	ori	r18, 0x04	; 4
    1048:	29 c0       	rjmp	.+82     	; 0x109c <vfprintf+0xd8>
    104a:	28 60       	ori	r18, 0x08	; 8
    104c:	27 c0       	rjmp	.+78     	; 0x109c <vfprintf+0xd8>
    104e:	20 61       	ori	r18, 0x10	; 16
    1050:	25 c0       	rjmp	.+74     	; 0x109c <vfprintf+0xd8>
    1052:	27 fd       	sbrc	r18, 7
    1054:	2c c0       	rjmp	.+88     	; 0x10ae <vfprintf+0xea>
    1056:	38 2f       	mov	r19, r24
    1058:	30 53       	subi	r19, 0x30	; 48
    105a:	3a 30       	cpi	r19, 0x0A	; 10
    105c:	98 f4       	brcc	.+38     	; 0x1084 <vfprintf+0xc0>
    105e:	26 ff       	sbrs	r18, 6
    1060:	08 c0       	rjmp	.+16     	; 0x1072 <vfprintf+0xae>
    1062:	8e 2d       	mov	r24, r14
    1064:	88 0f       	add	r24, r24
    1066:	e8 2e       	mov	r14, r24
    1068:	ee 0c       	add	r14, r14
    106a:	ee 0c       	add	r14, r14
    106c:	e8 0e       	add	r14, r24
    106e:	e3 0e       	add	r14, r19
    1070:	15 c0       	rjmp	.+42     	; 0x109c <vfprintf+0xd8>
    1072:	8f 2d       	mov	r24, r15
    1074:	88 0f       	add	r24, r24
    1076:	f8 2e       	mov	r15, r24
    1078:	ff 0c       	add	r15, r15
    107a:	ff 0c       	add	r15, r15
    107c:	f8 0e       	add	r15, r24
    107e:	f3 0e       	add	r15, r19
    1080:	20 62       	ori	r18, 0x20	; 32
    1082:	0c c0       	rjmp	.+24     	; 0x109c <vfprintf+0xd8>
    1084:	8e 32       	cpi	r24, 0x2E	; 46
    1086:	21 f4       	brne	.+8      	; 0x1090 <vfprintf+0xcc>
    1088:	26 fd       	sbrc	r18, 6
    108a:	78 c1       	rjmp	.+752    	; 0x137c <vfprintf+0x3b8>
    108c:	20 64       	ori	r18, 0x40	; 64
    108e:	06 c0       	rjmp	.+12     	; 0x109c <vfprintf+0xd8>
    1090:	8c 36       	cpi	r24, 0x6C	; 108
    1092:	11 f4       	brne	.+4      	; 0x1098 <vfprintf+0xd4>
    1094:	20 68       	ori	r18, 0x80	; 128
    1096:	02 c0       	rjmp	.+4      	; 0x109c <vfprintf+0xd8>
    1098:	88 36       	cpi	r24, 0x68	; 104
    109a:	49 f4       	brne	.+18     	; 0x10ae <vfprintf+0xea>
    109c:	f1 01       	movw	r30, r2
    109e:	93 fd       	sbrc	r25, 3
    10a0:	85 91       	lpm	r24, Z+
    10a2:	93 ff       	sbrs	r25, 3
    10a4:	81 91       	ld	r24, Z+
    10a6:	1f 01       	movw	r2, r30
    10a8:	88 23       	and	r24, r24
    10aa:	09 f0       	breq	.+2      	; 0x10ae <vfprintf+0xea>
    10ac:	ba cf       	rjmp	.-140    	; 0x1022 <vfprintf+0x5e>
    10ae:	98 2f       	mov	r25, r24
    10b0:	95 54       	subi	r25, 0x45	; 69
    10b2:	93 30       	cpi	r25, 0x03	; 3
    10b4:	18 f0       	brcs	.+6      	; 0x10bc <vfprintf+0xf8>
    10b6:	90 52       	subi	r25, 0x20	; 32
    10b8:	93 30       	cpi	r25, 0x03	; 3
    10ba:	28 f4       	brcc	.+10     	; 0x10c6 <vfprintf+0x102>
    10bc:	0c 5f       	subi	r16, 0xFC	; 252
    10be:	1f 4f       	sbci	r17, 0xFF	; 255
    10c0:	ff e3       	ldi	r31, 0x3F	; 63
    10c2:	f9 83       	std	Y+1, r31	; 0x01
    10c4:	0d c0       	rjmp	.+26     	; 0x10e0 <vfprintf+0x11c>
    10c6:	83 36       	cpi	r24, 0x63	; 99
    10c8:	31 f0       	breq	.+12     	; 0x10d6 <vfprintf+0x112>
    10ca:	83 37       	cpi	r24, 0x73	; 115
    10cc:	71 f0       	breq	.+28     	; 0x10ea <vfprintf+0x126>
    10ce:	83 35       	cpi	r24, 0x53	; 83
    10d0:	09 f0       	breq	.+2      	; 0x10d4 <vfprintf+0x110>
    10d2:	60 c0       	rjmp	.+192    	; 0x1194 <vfprintf+0x1d0>
    10d4:	22 c0       	rjmp	.+68     	; 0x111a <vfprintf+0x156>
    10d6:	f8 01       	movw	r30, r16
    10d8:	80 81       	ld	r24, Z
    10da:	89 83       	std	Y+1, r24	; 0x01
    10dc:	0e 5f       	subi	r16, 0xFE	; 254
    10de:	1f 4f       	sbci	r17, 0xFF	; 255
    10e0:	42 01       	movw	r8, r4
    10e2:	71 e0       	ldi	r23, 0x01	; 1
    10e4:	a7 2e       	mov	r10, r23
    10e6:	b1 2c       	mov	r11, r1
    10e8:	16 c0       	rjmp	.+44     	; 0x1116 <vfprintf+0x152>
    10ea:	62 e0       	ldi	r22, 0x02	; 2
    10ec:	66 2e       	mov	r6, r22
    10ee:	71 2c       	mov	r7, r1
    10f0:	60 0e       	add	r6, r16
    10f2:	71 1e       	adc	r7, r17
    10f4:	f8 01       	movw	r30, r16
    10f6:	80 80       	ld	r8, Z
    10f8:	91 80       	ldd	r9, Z+1	; 0x01
    10fa:	26 ff       	sbrs	r18, 6
    10fc:	03 c0       	rjmp	.+6      	; 0x1104 <vfprintf+0x140>
    10fe:	6e 2d       	mov	r22, r14
    1100:	70 e0       	ldi	r23, 0x00	; 0
    1102:	02 c0       	rjmp	.+4      	; 0x1108 <vfprintf+0x144>
    1104:	6f ef       	ldi	r22, 0xFF	; 255
    1106:	7f ef       	ldi	r23, 0xFF	; 255
    1108:	c4 01       	movw	r24, r8
    110a:	2c 87       	std	Y+12, r18	; 0x0c
    110c:	0e 94 d7 09 	call	0x13ae	; 0x13ae <strnlen>
    1110:	5c 01       	movw	r10, r24
    1112:	83 01       	movw	r16, r6
    1114:	2c 85       	ldd	r18, Y+12	; 0x0c
    1116:	2f 77       	andi	r18, 0x7F	; 127
    1118:	17 c0       	rjmp	.+46     	; 0x1148 <vfprintf+0x184>
    111a:	52 e0       	ldi	r21, 0x02	; 2
    111c:	65 2e       	mov	r6, r21
    111e:	71 2c       	mov	r7, r1
    1120:	60 0e       	add	r6, r16
    1122:	71 1e       	adc	r7, r17
    1124:	f8 01       	movw	r30, r16
    1126:	80 80       	ld	r8, Z
    1128:	91 80       	ldd	r9, Z+1	; 0x01
    112a:	26 ff       	sbrs	r18, 6
    112c:	03 c0       	rjmp	.+6      	; 0x1134 <vfprintf+0x170>
    112e:	6e 2d       	mov	r22, r14
    1130:	70 e0       	ldi	r23, 0x00	; 0
    1132:	02 c0       	rjmp	.+4      	; 0x1138 <vfprintf+0x174>
    1134:	6f ef       	ldi	r22, 0xFF	; 255
    1136:	7f ef       	ldi	r23, 0xFF	; 255
    1138:	c4 01       	movw	r24, r8
    113a:	2c 87       	std	Y+12, r18	; 0x0c
    113c:	0e 94 cc 09 	call	0x1398	; 0x1398 <strnlen_P>
    1140:	5c 01       	movw	r10, r24
    1142:	2c 85       	ldd	r18, Y+12	; 0x0c
    1144:	20 68       	ori	r18, 0x80	; 128
    1146:	83 01       	movw	r16, r6
    1148:	23 fd       	sbrc	r18, 3
    114a:	20 c0       	rjmp	.+64     	; 0x118c <vfprintf+0x1c8>
    114c:	08 c0       	rjmp	.+16     	; 0x115e <vfprintf+0x19a>
    114e:	80 e2       	ldi	r24, 0x20	; 32
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	b6 01       	movw	r22, r12
    1154:	2c 87       	std	Y+12, r18	; 0x0c
    1156:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <fputc>
    115a:	fa 94       	dec	r15
    115c:	2c 85       	ldd	r18, Y+12	; 0x0c
    115e:	8f 2d       	mov	r24, r15
    1160:	90 e0       	ldi	r25, 0x00	; 0
    1162:	a8 16       	cp	r10, r24
    1164:	b9 06       	cpc	r11, r25
    1166:	98 f3       	brcs	.-26     	; 0x114e <vfprintf+0x18a>
    1168:	11 c0       	rjmp	.+34     	; 0x118c <vfprintf+0x1c8>
    116a:	f4 01       	movw	r30, r8
    116c:	27 fd       	sbrc	r18, 7
    116e:	85 91       	lpm	r24, Z+
    1170:	27 ff       	sbrs	r18, 7
    1172:	81 91       	ld	r24, Z+
    1174:	4f 01       	movw	r8, r30
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	b6 01       	movw	r22, r12
    117a:	2c 87       	std	Y+12, r18	; 0x0c
    117c:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <fputc>
    1180:	2c 85       	ldd	r18, Y+12	; 0x0c
    1182:	f1 10       	cpse	r15, r1
    1184:	fa 94       	dec	r15
    1186:	08 94       	sec
    1188:	a1 08       	sbc	r10, r1
    118a:	b1 08       	sbc	r11, r1
    118c:	a1 14       	cp	r10, r1
    118e:	b1 04       	cpc	r11, r1
    1190:	61 f7       	brne	.-40     	; 0x116a <vfprintf+0x1a6>
    1192:	f1 c0       	rjmp	.+482    	; 0x1376 <vfprintf+0x3b2>
    1194:	84 36       	cpi	r24, 0x64	; 100
    1196:	11 f0       	breq	.+4      	; 0x119c <vfprintf+0x1d8>
    1198:	89 36       	cpi	r24, 0x69	; 105
    119a:	49 f5       	brne	.+82     	; 0x11ee <vfprintf+0x22a>
    119c:	27 ff       	sbrs	r18, 7
    119e:	08 c0       	rjmp	.+16     	; 0x11b0 <vfprintf+0x1ec>
    11a0:	f8 01       	movw	r30, r16
    11a2:	60 81       	ld	r22, Z
    11a4:	71 81       	ldd	r23, Z+1	; 0x01
    11a6:	82 81       	ldd	r24, Z+2	; 0x02
    11a8:	93 81       	ldd	r25, Z+3	; 0x03
    11aa:	0c 5f       	subi	r16, 0xFC	; 252
    11ac:	1f 4f       	sbci	r17, 0xFF	; 255
    11ae:	09 c0       	rjmp	.+18     	; 0x11c2 <vfprintf+0x1fe>
    11b0:	f8 01       	movw	r30, r16
    11b2:	60 81       	ld	r22, Z
    11b4:	71 81       	ldd	r23, Z+1	; 0x01
    11b6:	88 27       	eor	r24, r24
    11b8:	77 fd       	sbrc	r23, 7
    11ba:	80 95       	com	r24
    11bc:	98 2f       	mov	r25, r24
    11be:	0e 5f       	subi	r16, 0xFE	; 254
    11c0:	1f 4f       	sbci	r17, 0xFF	; 255
    11c2:	4f e6       	ldi	r20, 0x6F	; 111
    11c4:	b4 2e       	mov	r11, r20
    11c6:	b2 22       	and	r11, r18
    11c8:	97 ff       	sbrs	r25, 7
    11ca:	09 c0       	rjmp	.+18     	; 0x11de <vfprintf+0x21a>
    11cc:	90 95       	com	r25
    11ce:	80 95       	com	r24
    11d0:	70 95       	com	r23
    11d2:	61 95       	neg	r22
    11d4:	7f 4f       	sbci	r23, 0xFF	; 255
    11d6:	8f 4f       	sbci	r24, 0xFF	; 255
    11d8:	9f 4f       	sbci	r25, 0xFF	; 255
    11da:	f0 e8       	ldi	r31, 0x80	; 128
    11dc:	bf 2a       	or	r11, r31
    11de:	a2 01       	movw	r20, r4
    11e0:	2a e0       	ldi	r18, 0x0A	; 10
    11e2:	30 e0       	ldi	r19, 0x00	; 0
    11e4:	0e 94 0e 0a 	call	0x141c	; 0x141c <__ultoa_invert>
    11e8:	78 2e       	mov	r7, r24
    11ea:	74 18       	sub	r7, r4
    11ec:	45 c0       	rjmp	.+138    	; 0x1278 <vfprintf+0x2b4>
    11ee:	85 37       	cpi	r24, 0x75	; 117
    11f0:	31 f4       	brne	.+12     	; 0x11fe <vfprintf+0x23a>
    11f2:	3f ee       	ldi	r19, 0xEF	; 239
    11f4:	b3 2e       	mov	r11, r19
    11f6:	b2 22       	and	r11, r18
    11f8:	2a e0       	ldi	r18, 0x0A	; 10
    11fa:	30 e0       	ldi	r19, 0x00	; 0
    11fc:	25 c0       	rjmp	.+74     	; 0x1248 <vfprintf+0x284>
    11fe:	99 ef       	ldi	r25, 0xF9	; 249
    1200:	b9 2e       	mov	r11, r25
    1202:	b2 22       	and	r11, r18
    1204:	8f 36       	cpi	r24, 0x6F	; 111
    1206:	c1 f0       	breq	.+48     	; 0x1238 <vfprintf+0x274>
    1208:	80 37       	cpi	r24, 0x70	; 112
    120a:	20 f4       	brcc	.+8      	; 0x1214 <vfprintf+0x250>
    120c:	88 35       	cpi	r24, 0x58	; 88
    120e:	09 f0       	breq	.+2      	; 0x1212 <vfprintf+0x24e>
    1210:	b5 c0       	rjmp	.+362    	; 0x137c <vfprintf+0x3b8>
    1212:	0d c0       	rjmp	.+26     	; 0x122e <vfprintf+0x26a>
    1214:	80 37       	cpi	r24, 0x70	; 112
    1216:	21 f0       	breq	.+8      	; 0x1220 <vfprintf+0x25c>
    1218:	88 37       	cpi	r24, 0x78	; 120
    121a:	09 f0       	breq	.+2      	; 0x121e <vfprintf+0x25a>
    121c:	af c0       	rjmp	.+350    	; 0x137c <vfprintf+0x3b8>
    121e:	02 c0       	rjmp	.+4      	; 0x1224 <vfprintf+0x260>
    1220:	20 e1       	ldi	r18, 0x10	; 16
    1222:	b2 2a       	or	r11, r18
    1224:	b4 fe       	sbrs	r11, 4
    1226:	0b c0       	rjmp	.+22     	; 0x123e <vfprintf+0x27a>
    1228:	84 e0       	ldi	r24, 0x04	; 4
    122a:	b8 2a       	or	r11, r24
    122c:	08 c0       	rjmp	.+16     	; 0x123e <vfprintf+0x27a>
    122e:	b4 fe       	sbrs	r11, 4
    1230:	09 c0       	rjmp	.+18     	; 0x1244 <vfprintf+0x280>
    1232:	e6 e0       	ldi	r30, 0x06	; 6
    1234:	be 2a       	or	r11, r30
    1236:	06 c0       	rjmp	.+12     	; 0x1244 <vfprintf+0x280>
    1238:	28 e0       	ldi	r18, 0x08	; 8
    123a:	30 e0       	ldi	r19, 0x00	; 0
    123c:	05 c0       	rjmp	.+10     	; 0x1248 <vfprintf+0x284>
    123e:	20 e1       	ldi	r18, 0x10	; 16
    1240:	30 e0       	ldi	r19, 0x00	; 0
    1242:	02 c0       	rjmp	.+4      	; 0x1248 <vfprintf+0x284>
    1244:	20 e1       	ldi	r18, 0x10	; 16
    1246:	32 e0       	ldi	r19, 0x02	; 2
    1248:	b7 fe       	sbrs	r11, 7
    124a:	08 c0       	rjmp	.+16     	; 0x125c <vfprintf+0x298>
    124c:	f8 01       	movw	r30, r16
    124e:	60 81       	ld	r22, Z
    1250:	71 81       	ldd	r23, Z+1	; 0x01
    1252:	82 81       	ldd	r24, Z+2	; 0x02
    1254:	93 81       	ldd	r25, Z+3	; 0x03
    1256:	0c 5f       	subi	r16, 0xFC	; 252
    1258:	1f 4f       	sbci	r17, 0xFF	; 255
    125a:	07 c0       	rjmp	.+14     	; 0x126a <vfprintf+0x2a6>
    125c:	f8 01       	movw	r30, r16
    125e:	60 81       	ld	r22, Z
    1260:	71 81       	ldd	r23, Z+1	; 0x01
    1262:	80 e0       	ldi	r24, 0x00	; 0
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	0e 5f       	subi	r16, 0xFE	; 254
    1268:	1f 4f       	sbci	r17, 0xFF	; 255
    126a:	a2 01       	movw	r20, r4
    126c:	0e 94 0e 0a 	call	0x141c	; 0x141c <__ultoa_invert>
    1270:	78 2e       	mov	r7, r24
    1272:	74 18       	sub	r7, r4
    1274:	ff e7       	ldi	r31, 0x7F	; 127
    1276:	bf 22       	and	r11, r31
    1278:	b6 fe       	sbrs	r11, 6
    127a:	0b c0       	rjmp	.+22     	; 0x1292 <vfprintf+0x2ce>
    127c:	2e ef       	ldi	r18, 0xFE	; 254
    127e:	b2 22       	and	r11, r18
    1280:	7e 14       	cp	r7, r14
    1282:	38 f4       	brcc	.+14     	; 0x1292 <vfprintf+0x2ce>
    1284:	b4 fe       	sbrs	r11, 4
    1286:	07 c0       	rjmp	.+14     	; 0x1296 <vfprintf+0x2d2>
    1288:	b2 fc       	sbrc	r11, 2
    128a:	05 c0       	rjmp	.+10     	; 0x1296 <vfprintf+0x2d2>
    128c:	8f ee       	ldi	r24, 0xEF	; 239
    128e:	b8 22       	and	r11, r24
    1290:	02 c0       	rjmp	.+4      	; 0x1296 <vfprintf+0x2d2>
    1292:	a7 2c       	mov	r10, r7
    1294:	01 c0       	rjmp	.+2      	; 0x1298 <vfprintf+0x2d4>
    1296:	ae 2c       	mov	r10, r14
    1298:	8b 2d       	mov	r24, r11
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	b4 fe       	sbrs	r11, 4
    129e:	0d c0       	rjmp	.+26     	; 0x12ba <vfprintf+0x2f6>
    12a0:	fe 01       	movw	r30, r28
    12a2:	e7 0d       	add	r30, r7
    12a4:	f1 1d       	adc	r31, r1
    12a6:	20 81       	ld	r18, Z
    12a8:	20 33       	cpi	r18, 0x30	; 48
    12aa:	19 f4       	brne	.+6      	; 0x12b2 <vfprintf+0x2ee>
    12ac:	e9 ee       	ldi	r30, 0xE9	; 233
    12ae:	be 22       	and	r11, r30
    12b0:	09 c0       	rjmp	.+18     	; 0x12c4 <vfprintf+0x300>
    12b2:	a3 94       	inc	r10
    12b4:	b2 fe       	sbrs	r11, 2
    12b6:	06 c0       	rjmp	.+12     	; 0x12c4 <vfprintf+0x300>
    12b8:	04 c0       	rjmp	.+8      	; 0x12c2 <vfprintf+0x2fe>
    12ba:	86 78       	andi	r24, 0x86	; 134
    12bc:	90 70       	andi	r25, 0x00	; 0
    12be:	00 97       	sbiw	r24, 0x00	; 0
    12c0:	09 f0       	breq	.+2      	; 0x12c4 <vfprintf+0x300>
    12c2:	a3 94       	inc	r10
    12c4:	8b 2c       	mov	r8, r11
    12c6:	99 24       	eor	r9, r9
    12c8:	b3 fc       	sbrc	r11, 3
    12ca:	14 c0       	rjmp	.+40     	; 0x12f4 <vfprintf+0x330>
    12cc:	b0 fe       	sbrs	r11, 0
    12ce:	0f c0       	rjmp	.+30     	; 0x12ee <vfprintf+0x32a>
    12d0:	af 14       	cp	r10, r15
    12d2:	28 f4       	brcc	.+10     	; 0x12de <vfprintf+0x31a>
    12d4:	e7 2c       	mov	r14, r7
    12d6:	ef 0c       	add	r14, r15
    12d8:	ea 18       	sub	r14, r10
    12da:	af 2c       	mov	r10, r15
    12dc:	08 c0       	rjmp	.+16     	; 0x12ee <vfprintf+0x32a>
    12de:	e7 2c       	mov	r14, r7
    12e0:	06 c0       	rjmp	.+12     	; 0x12ee <vfprintf+0x32a>
    12e2:	80 e2       	ldi	r24, 0x20	; 32
    12e4:	90 e0       	ldi	r25, 0x00	; 0
    12e6:	b6 01       	movw	r22, r12
    12e8:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <fputc>
    12ec:	a3 94       	inc	r10
    12ee:	af 14       	cp	r10, r15
    12f0:	c0 f3       	brcs	.-16     	; 0x12e2 <vfprintf+0x31e>
    12f2:	04 c0       	rjmp	.+8      	; 0x12fc <vfprintf+0x338>
    12f4:	af 14       	cp	r10, r15
    12f6:	10 f4       	brcc	.+4      	; 0x12fc <vfprintf+0x338>
    12f8:	fa 18       	sub	r15, r10
    12fa:	01 c0       	rjmp	.+2      	; 0x12fe <vfprintf+0x33a>
    12fc:	ff 24       	eor	r15, r15
    12fe:	84 fe       	sbrs	r8, 4
    1300:	0f c0       	rjmp	.+30     	; 0x1320 <vfprintf+0x35c>
    1302:	80 e3       	ldi	r24, 0x30	; 48
    1304:	90 e0       	ldi	r25, 0x00	; 0
    1306:	b6 01       	movw	r22, r12
    1308:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <fputc>
    130c:	82 fe       	sbrs	r8, 2
    130e:	1f c0       	rjmp	.+62     	; 0x134e <vfprintf+0x38a>
    1310:	81 fe       	sbrs	r8, 1
    1312:	03 c0       	rjmp	.+6      	; 0x131a <vfprintf+0x356>
    1314:	88 e5       	ldi	r24, 0x58	; 88
    1316:	90 e0       	ldi	r25, 0x00	; 0
    1318:	10 c0       	rjmp	.+32     	; 0x133a <vfprintf+0x376>
    131a:	88 e7       	ldi	r24, 0x78	; 120
    131c:	90 e0       	ldi	r25, 0x00	; 0
    131e:	0d c0       	rjmp	.+26     	; 0x133a <vfprintf+0x376>
    1320:	c4 01       	movw	r24, r8
    1322:	86 78       	andi	r24, 0x86	; 134
    1324:	90 70       	andi	r25, 0x00	; 0
    1326:	00 97       	sbiw	r24, 0x00	; 0
    1328:	91 f0       	breq	.+36     	; 0x134e <vfprintf+0x38a>
    132a:	81 fc       	sbrc	r8, 1
    132c:	02 c0       	rjmp	.+4      	; 0x1332 <vfprintf+0x36e>
    132e:	80 e2       	ldi	r24, 0x20	; 32
    1330:	01 c0       	rjmp	.+2      	; 0x1334 <vfprintf+0x370>
    1332:	8b e2       	ldi	r24, 0x2B	; 43
    1334:	b7 fc       	sbrc	r11, 7
    1336:	8d e2       	ldi	r24, 0x2D	; 45
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	b6 01       	movw	r22, r12
    133c:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <fputc>
    1340:	06 c0       	rjmp	.+12     	; 0x134e <vfprintf+0x38a>
    1342:	80 e3       	ldi	r24, 0x30	; 48
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	b6 01       	movw	r22, r12
    1348:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <fputc>
    134c:	ea 94       	dec	r14
    134e:	7e 14       	cp	r7, r14
    1350:	c0 f3       	brcs	.-16     	; 0x1342 <vfprintf+0x37e>
    1352:	7a 94       	dec	r7
    1354:	f2 01       	movw	r30, r4
    1356:	e7 0d       	add	r30, r7
    1358:	f1 1d       	adc	r31, r1
    135a:	80 81       	ld	r24, Z
    135c:	90 e0       	ldi	r25, 0x00	; 0
    135e:	b6 01       	movw	r22, r12
    1360:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <fputc>
    1364:	77 20       	and	r7, r7
    1366:	a9 f7       	brne	.-22     	; 0x1352 <vfprintf+0x38e>
    1368:	06 c0       	rjmp	.+12     	; 0x1376 <vfprintf+0x3b2>
    136a:	80 e2       	ldi	r24, 0x20	; 32
    136c:	90 e0       	ldi	r25, 0x00	; 0
    136e:	b6 01       	movw	r22, r12
    1370:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <fputc>
    1374:	fa 94       	dec	r15
    1376:	ff 20       	and	r15, r15
    1378:	c1 f7       	brne	.-16     	; 0x136a <vfprintf+0x3a6>
    137a:	37 ce       	rjmp	.-914    	; 0xfea <vfprintf+0x26>
    137c:	f6 01       	movw	r30, r12
    137e:	26 81       	ldd	r18, Z+6	; 0x06
    1380:	37 81       	ldd	r19, Z+7	; 0x07
    1382:	02 c0       	rjmp	.+4      	; 0x1388 <vfprintf+0x3c4>
    1384:	2f ef       	ldi	r18, 0xFF	; 255
    1386:	3f ef       	ldi	r19, 0xFF	; 255
    1388:	c9 01       	movw	r24, r18
    138a:	2c 96       	adiw	r28, 0x0c	; 12
    138c:	e2 e1       	ldi	r30, 0x12	; 18
    138e:	0c 94 88 0a 	jmp	0x1510	; 0x1510 <__epilogue_restores__>

00001392 <__ctype_isfalse>:
    1392:	99 27       	eor	r25, r25
    1394:	88 27       	eor	r24, r24

00001396 <__ctype_istrue>:
    1396:	08 95       	ret

00001398 <strnlen_P>:
    1398:	fc 01       	movw	r30, r24
    139a:	05 90       	lpm	r0, Z+
    139c:	61 50       	subi	r22, 0x01	; 1
    139e:	70 40       	sbci	r23, 0x00	; 0
    13a0:	01 10       	cpse	r0, r1
    13a2:	d8 f7       	brcc	.-10     	; 0x139a <strnlen_P+0x2>
    13a4:	80 95       	com	r24
    13a6:	90 95       	com	r25
    13a8:	8e 0f       	add	r24, r30
    13aa:	9f 1f       	adc	r25, r31
    13ac:	08 95       	ret

000013ae <strnlen>:
    13ae:	fc 01       	movw	r30, r24
    13b0:	61 50       	subi	r22, 0x01	; 1
    13b2:	70 40       	sbci	r23, 0x00	; 0
    13b4:	01 90       	ld	r0, Z+
    13b6:	01 10       	cpse	r0, r1
    13b8:	d8 f7       	brcc	.-10     	; 0x13b0 <strnlen+0x2>
    13ba:	80 95       	com	r24
    13bc:	90 95       	com	r25
    13be:	8e 0f       	add	r24, r30
    13c0:	9f 1f       	adc	r25, r31
    13c2:	08 95       	ret

000013c4 <fputc>:
    13c4:	0f 93       	push	r16
    13c6:	1f 93       	push	r17
    13c8:	cf 93       	push	r28
    13ca:	df 93       	push	r29
    13cc:	8c 01       	movw	r16, r24
    13ce:	eb 01       	movw	r28, r22
    13d0:	8b 81       	ldd	r24, Y+3	; 0x03
    13d2:	81 ff       	sbrs	r24, 1
    13d4:	1b c0       	rjmp	.+54     	; 0x140c <fputc+0x48>
    13d6:	82 ff       	sbrs	r24, 2
    13d8:	0d c0       	rjmp	.+26     	; 0x13f4 <fputc+0x30>
    13da:	2e 81       	ldd	r18, Y+6	; 0x06
    13dc:	3f 81       	ldd	r19, Y+7	; 0x07
    13de:	8c 81       	ldd	r24, Y+4	; 0x04
    13e0:	9d 81       	ldd	r25, Y+5	; 0x05
    13e2:	28 17       	cp	r18, r24
    13e4:	39 07       	cpc	r19, r25
    13e6:	64 f4       	brge	.+24     	; 0x1400 <fputc+0x3c>
    13e8:	e8 81       	ld	r30, Y
    13ea:	f9 81       	ldd	r31, Y+1	; 0x01
    13ec:	01 93       	st	Z+, r16
    13ee:	f9 83       	std	Y+1, r31	; 0x01
    13f0:	e8 83       	st	Y, r30
    13f2:	06 c0       	rjmp	.+12     	; 0x1400 <fputc+0x3c>
    13f4:	e8 85       	ldd	r30, Y+8	; 0x08
    13f6:	f9 85       	ldd	r31, Y+9	; 0x09
    13f8:	80 2f       	mov	r24, r16
    13fa:	09 95       	icall
    13fc:	00 97       	sbiw	r24, 0x00	; 0
    13fe:	31 f4       	brne	.+12     	; 0x140c <fputc+0x48>
    1400:	8e 81       	ldd	r24, Y+6	; 0x06
    1402:	9f 81       	ldd	r25, Y+7	; 0x07
    1404:	01 96       	adiw	r24, 0x01	; 1
    1406:	9f 83       	std	Y+7, r25	; 0x07
    1408:	8e 83       	std	Y+6, r24	; 0x06
    140a:	02 c0       	rjmp	.+4      	; 0x1410 <fputc+0x4c>
    140c:	0f ef       	ldi	r16, 0xFF	; 255
    140e:	1f ef       	ldi	r17, 0xFF	; 255
    1410:	c8 01       	movw	r24, r16
    1412:	df 91       	pop	r29
    1414:	cf 91       	pop	r28
    1416:	1f 91       	pop	r17
    1418:	0f 91       	pop	r16
    141a:	08 95       	ret

0000141c <__ultoa_invert>:
    141c:	fa 01       	movw	r30, r20
    141e:	aa 27       	eor	r26, r26
    1420:	28 30       	cpi	r18, 0x08	; 8
    1422:	51 f1       	breq	.+84     	; 0x1478 <__ultoa_invert+0x5c>
    1424:	20 31       	cpi	r18, 0x10	; 16
    1426:	81 f1       	breq	.+96     	; 0x1488 <__ultoa_invert+0x6c>
    1428:	e8 94       	clt
    142a:	6f 93       	push	r22
    142c:	6e 7f       	andi	r22, 0xFE	; 254
    142e:	6e 5f       	subi	r22, 0xFE	; 254
    1430:	7f 4f       	sbci	r23, 0xFF	; 255
    1432:	8f 4f       	sbci	r24, 0xFF	; 255
    1434:	9f 4f       	sbci	r25, 0xFF	; 255
    1436:	af 4f       	sbci	r26, 0xFF	; 255
    1438:	b1 e0       	ldi	r27, 0x01	; 1
    143a:	3e d0       	rcall	.+124    	; 0x14b8 <__ultoa_invert+0x9c>
    143c:	b4 e0       	ldi	r27, 0x04	; 4
    143e:	3c d0       	rcall	.+120    	; 0x14b8 <__ultoa_invert+0x9c>
    1440:	67 0f       	add	r22, r23
    1442:	78 1f       	adc	r23, r24
    1444:	89 1f       	adc	r24, r25
    1446:	9a 1f       	adc	r25, r26
    1448:	a1 1d       	adc	r26, r1
    144a:	68 0f       	add	r22, r24
    144c:	79 1f       	adc	r23, r25
    144e:	8a 1f       	adc	r24, r26
    1450:	91 1d       	adc	r25, r1
    1452:	a1 1d       	adc	r26, r1
    1454:	6a 0f       	add	r22, r26
    1456:	71 1d       	adc	r23, r1
    1458:	81 1d       	adc	r24, r1
    145a:	91 1d       	adc	r25, r1
    145c:	a1 1d       	adc	r26, r1
    145e:	20 d0       	rcall	.+64     	; 0x14a0 <__ultoa_invert+0x84>
    1460:	09 f4       	brne	.+2      	; 0x1464 <__ultoa_invert+0x48>
    1462:	68 94       	set
    1464:	3f 91       	pop	r19
    1466:	2a e0       	ldi	r18, 0x0A	; 10
    1468:	26 9f       	mul	r18, r22
    146a:	11 24       	eor	r1, r1
    146c:	30 19       	sub	r19, r0
    146e:	30 5d       	subi	r19, 0xD0	; 208
    1470:	31 93       	st	Z+, r19
    1472:	de f6       	brtc	.-74     	; 0x142a <__ultoa_invert+0xe>
    1474:	cf 01       	movw	r24, r30
    1476:	08 95       	ret
    1478:	46 2f       	mov	r20, r22
    147a:	47 70       	andi	r20, 0x07	; 7
    147c:	40 5d       	subi	r20, 0xD0	; 208
    147e:	41 93       	st	Z+, r20
    1480:	b3 e0       	ldi	r27, 0x03	; 3
    1482:	0f d0       	rcall	.+30     	; 0x14a2 <__ultoa_invert+0x86>
    1484:	c9 f7       	brne	.-14     	; 0x1478 <__ultoa_invert+0x5c>
    1486:	f6 cf       	rjmp	.-20     	; 0x1474 <__ultoa_invert+0x58>
    1488:	46 2f       	mov	r20, r22
    148a:	4f 70       	andi	r20, 0x0F	; 15
    148c:	40 5d       	subi	r20, 0xD0	; 208
    148e:	4a 33       	cpi	r20, 0x3A	; 58
    1490:	18 f0       	brcs	.+6      	; 0x1498 <__ultoa_invert+0x7c>
    1492:	49 5d       	subi	r20, 0xD9	; 217
    1494:	31 fd       	sbrc	r19, 1
    1496:	40 52       	subi	r20, 0x20	; 32
    1498:	41 93       	st	Z+, r20
    149a:	02 d0       	rcall	.+4      	; 0x14a0 <__ultoa_invert+0x84>
    149c:	a9 f7       	brne	.-22     	; 0x1488 <__ultoa_invert+0x6c>
    149e:	ea cf       	rjmp	.-44     	; 0x1474 <__ultoa_invert+0x58>
    14a0:	b4 e0       	ldi	r27, 0x04	; 4
    14a2:	a6 95       	lsr	r26
    14a4:	97 95       	ror	r25
    14a6:	87 95       	ror	r24
    14a8:	77 95       	ror	r23
    14aa:	67 95       	ror	r22
    14ac:	ba 95       	dec	r27
    14ae:	c9 f7       	brne	.-14     	; 0x14a2 <__ultoa_invert+0x86>
    14b0:	00 97       	sbiw	r24, 0x00	; 0
    14b2:	61 05       	cpc	r22, r1
    14b4:	71 05       	cpc	r23, r1
    14b6:	08 95       	ret
    14b8:	9b 01       	movw	r18, r22
    14ba:	ac 01       	movw	r20, r24
    14bc:	0a 2e       	mov	r0, r26
    14be:	06 94       	lsr	r0
    14c0:	57 95       	ror	r21
    14c2:	47 95       	ror	r20
    14c4:	37 95       	ror	r19
    14c6:	27 95       	ror	r18
    14c8:	ba 95       	dec	r27
    14ca:	c9 f7       	brne	.-14     	; 0x14be <__ultoa_invert+0xa2>
    14cc:	62 0f       	add	r22, r18
    14ce:	73 1f       	adc	r23, r19
    14d0:	84 1f       	adc	r24, r20
    14d2:	95 1f       	adc	r25, r21
    14d4:	a0 1d       	adc	r26, r0
    14d6:	08 95       	ret

000014d8 <__prologue_saves__>:
    14d8:	2f 92       	push	r2
    14da:	3f 92       	push	r3
    14dc:	4f 92       	push	r4
    14de:	5f 92       	push	r5
    14e0:	6f 92       	push	r6
    14e2:	7f 92       	push	r7
    14e4:	8f 92       	push	r8
    14e6:	9f 92       	push	r9
    14e8:	af 92       	push	r10
    14ea:	bf 92       	push	r11
    14ec:	cf 92       	push	r12
    14ee:	df 92       	push	r13
    14f0:	ef 92       	push	r14
    14f2:	ff 92       	push	r15
    14f4:	0f 93       	push	r16
    14f6:	1f 93       	push	r17
    14f8:	cf 93       	push	r28
    14fa:	df 93       	push	r29
    14fc:	cd b7       	in	r28, 0x3d	; 61
    14fe:	de b7       	in	r29, 0x3e	; 62
    1500:	ca 1b       	sub	r28, r26
    1502:	db 0b       	sbc	r29, r27
    1504:	0f b6       	in	r0, 0x3f	; 63
    1506:	f8 94       	cli
    1508:	de bf       	out	0x3e, r29	; 62
    150a:	0f be       	out	0x3f, r0	; 63
    150c:	cd bf       	out	0x3d, r28	; 61
    150e:	09 94       	ijmp

00001510 <__epilogue_restores__>:
    1510:	2a 88       	ldd	r2, Y+18	; 0x12
    1512:	39 88       	ldd	r3, Y+17	; 0x11
    1514:	48 88       	ldd	r4, Y+16	; 0x10
    1516:	5f 84       	ldd	r5, Y+15	; 0x0f
    1518:	6e 84       	ldd	r6, Y+14	; 0x0e
    151a:	7d 84       	ldd	r7, Y+13	; 0x0d
    151c:	8c 84       	ldd	r8, Y+12	; 0x0c
    151e:	9b 84       	ldd	r9, Y+11	; 0x0b
    1520:	aa 84       	ldd	r10, Y+10	; 0x0a
    1522:	b9 84       	ldd	r11, Y+9	; 0x09
    1524:	c8 84       	ldd	r12, Y+8	; 0x08
    1526:	df 80       	ldd	r13, Y+7	; 0x07
    1528:	ee 80       	ldd	r14, Y+6	; 0x06
    152a:	fd 80       	ldd	r15, Y+5	; 0x05
    152c:	0c 81       	ldd	r16, Y+4	; 0x04
    152e:	1b 81       	ldd	r17, Y+3	; 0x03
    1530:	aa 81       	ldd	r26, Y+2	; 0x02
    1532:	b9 81       	ldd	r27, Y+1	; 0x01
    1534:	ce 0f       	add	r28, r30
    1536:	d1 1d       	adc	r29, r1
    1538:	0f b6       	in	r0, 0x3f	; 63
    153a:	f8 94       	cli
    153c:	de bf       	out	0x3e, r29	; 62
    153e:	0f be       	out	0x3f, r0	; 63
    1540:	cd bf       	out	0x3d, r28	; 61
    1542:	ed 01       	movw	r28, r26
    1544:	08 95       	ret

00001546 <_exit>:
    1546:	f8 94       	cli

00001548 <__stop_program>:
    1548:	ff cf       	rjmp	.-2      	; 0x1548 <__stop_program>
